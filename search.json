[
  {
    "objectID": "4511/hw/hw2.html",
    "href": "4511/hw/hw2.html",
    "title": "Homework Two",
    "section": "",
    "text": "You will design agents for the classic version of Pacman, including ghosts. Along the way, you will implement both minimax and expectimax search and try your hand at evaluation function design.\nThe code base has not changed much from the previous assignment, but please start with a fresh installation, and don’t reuse files from Homework 1.\nWe provide the autograder for you to grade your answers locally. This can be run on all questions with the command:\npython autograder.py\nIt can be run for one particular question, such as q2, by:\npython autograder.py -q q2\nIt can be run for one particular test by commands of the form:\npython autograder.py -t test_cases/q2/0-small-tree\nBy default, the autograder displays graphics with the -t option, but doesn’t with the -q option. You can force graphics by using the --graphics flag, or force no graphics by using the --no-graphics flag.\nThe code for this project consists of several Python files, some of which you will need to read and understand in order to complete the assignment, and some of which you can ignore. You can download all the code and supporting files in: games dot zip.\nFiles to Edit and Submit: You will fill in portions of multiAgents.py during the assignment. Once you have completed the assignment, you will submit these files to the submit server. Please submit a single (uncompressed) .tar containing this file. Include a comment at the start of searchAgents.py indicating what help, if any, you got on this assignment. If you didn’t get any help, indicate this. Failure to include this comment will result in losing 10 points on the assignment grade.\nEvaluation: Evaluation of your code’s correctness will be performed by the autograder. If you think your code is correct and the autograder is in error, bring this to my attention before the submission deadline. Point values are relative within each assignment: all assignments are scaled to 100 when calculating grades. The server will allow you to submit multiple times for credit, but please run the autograder locally first.\nAcademic Dishonesty: This assignment is individual effort. Please review the collaboration policy for the course and adhere to it."
  },
  {
    "objectID": "4511/hw/hw2.html#introduction",
    "href": "4511/hw/hw2.html#introduction",
    "title": "Homework Two",
    "section": "",
    "text": "You will design agents for the classic version of Pacman, including ghosts. Along the way, you will implement both minimax and expectimax search and try your hand at evaluation function design.\nThe code base has not changed much from the previous assignment, but please start with a fresh installation, and don’t reuse files from Homework 1.\nWe provide the autograder for you to grade your answers locally. This can be run on all questions with the command:\npython autograder.py\nIt can be run for one particular question, such as q2, by:\npython autograder.py -q q2\nIt can be run for one particular test by commands of the form:\npython autograder.py -t test_cases/q2/0-small-tree\nBy default, the autograder displays graphics with the -t option, but doesn’t with the -q option. You can force graphics by using the --graphics flag, or force no graphics by using the --no-graphics flag.\nThe code for this project consists of several Python files, some of which you will need to read and understand in order to complete the assignment, and some of which you can ignore. You can download all the code and supporting files in: games dot zip.\nFiles to Edit and Submit: You will fill in portions of multiAgents.py during the assignment. Once you have completed the assignment, you will submit these files to the submit server. Please submit a single (uncompressed) .tar containing this file. Include a comment at the start of searchAgents.py indicating what help, if any, you got on this assignment. If you didn’t get any help, indicate this. Failure to include this comment will result in losing 10 points on the assignment grade.\nEvaluation: Evaluation of your code’s correctness will be performed by the autograder. If you think your code is correct and the autograder is in error, bring this to my attention before the submission deadline. Point values are relative within each assignment: all assignments are scaled to 100 when calculating grades. The server will allow you to submit multiple times for credit, but please run the autograder locally first.\nAcademic Dishonesty: This assignment is individual effort. Please review the collaboration policy for the course and adhere to it."
  },
  {
    "objectID": "4511/hw/hw2.html#multi-agent-pacman",
    "href": "4511/hw/hw2.html#multi-agent-pacman",
    "title": "Homework Two",
    "section": "2 Multi-Agent Pacman",
    "text": "2 Multi-Agent Pacman\nFirst, play a game of classic Pacman by running the following command:\npython pacman.py\nand using the arrow keys to move. Now, run the provided ReflexAgent in multiAgents.py\npython pacman.py -p ReflexAgent\nNote that it plays quite poorly even on simple layouts:\npython pacman.py -p ReflexAgent -l testClassic\nInspect its code (in multiAgents.py) and make sure you understand what it’s doing."
  },
  {
    "objectID": "4511/hw/hw2.html#q1-4-pts-reflex-agent",
    "href": "4511/hw/hw2.html#q1-4-pts-reflex-agent",
    "title": "Homework Two",
    "section": "3 Q1 (4 pts): Reflex Agent",
    "text": "3 Q1 (4 pts): Reflex Agent\nImprove the ReflexAgent in multiAgents.py to play respectably. The provided reflex agent code provides some helpful examples of methods that query the GameState for information. A capable reflex agent will have to consider both food locations and ghost locations to perform well. Your agent should easily and reliably clear the testClassic layout:\npython pacman.py -p ReflexAgent -l testClassic\nTry out your reflex agent on the default mediumClassic layout with one ghost or two (and animation off to speed up the display):\npython pacman.py --frameTime 0 -p ReflexAgent -k 1\npython pacman.py --frameTime 0 -p ReflexAgent -k 2\nHow does your agent fare? It will likely often die with 2 ghosts on the default board, unless your evaluation function is quite good.\n\n\n\n\n\n\nNotes\n\n\n\n\nRemember that newFood has the function asList()\nAs features, try the reciprocal of important values (such as distance to food) rather than just the values themselves.\nThe evaluation function you’re writing is evaluating state-action pairs; in later parts of the assignment, you’ll be evaluating states.\nYou may find it useful to view the internal contents of various objects for debugging. You can do this by printing the objects’ string representations. For example, you can print newGhostStates with print(newGhostStates).\n\nCommand-Line Options: Default ghosts are random; you can also play for fun with slightly smarter directional ghosts using -g DirectionalGhost. If the randomness is preventing you from telling whether your agent is improving, you can use -f to run with a fixed random seed (same random choices every game). You can also play multiple games in a row with -n. Turn off graphics with -q to run lots of games quickly.\n\n\nGrading: We will run your agent on the openClassic layout 10 times. You will receive 0 points if your agent times out, or never wins. You will receive 1 point if your agent wins at least 5 times, or 2 points if your agent wins all 10 games. You will receive an additional 1 point if your agent’s average score is greater than 500, or 2 points if it is greater than 1000. You can try your agent out under these conditions with\npython autograder.py -q q1\nTo run it without graphics, use:\npython autograder.py -q q1 --no-graphics"
  },
  {
    "objectID": "4511/hw/hw2.html#q2-5-pts-minimax",
    "href": "4511/hw/hw2.html#q2-5-pts-minimax",
    "title": "Homework Two",
    "section": "4 Q2 (5 pts): Minimax",
    "text": "4 Q2 (5 pts): Minimax\nNow you will write an adversarial search agent in the provided MinimaxAgent class stub in multiAgents.py. Your minimax agent should work with any number of ghosts, so you’ll have to write an algorithm that is slightly more general than what you’ve previously seen in lecture. In particular, your minimax tree will have multiple min layers (one for each ghost) for every max layer.\nYour code should also expand the game tree to an arbitrary depth. Score the leaves of your minimax tree with the supplied self.evaluationFunction, which defaults to scoreEvaluationFunction. MinimaxAgent extends MultiAgentSearchAgent, which gives access to self.depth and self.evaluationFunction. Make sure your minimax code makes reference to these two variables where appropriate as these variables are populated in response to command line options.\nImportant: A single search ply is considered to be one Pacman move and all the ghosts’ responses, so depth 2 search will involve Pacman and each ghost moving two times (see diagram below).\n\n\n\nMinimax tree with depth 2\n\n\nGrading: We will be checking your code to determine whether it explores the correct number of game states. This is the only reliable way to detect some very subtle bugs in implementations of minimax. As a result, the autograder will be very picky about how many times you call GameState.generateSuccessor. If you call it any more or less than necessary, the autograder will complain. To test and debug your code, run\npython autograder.py -q q2\nThis will show what your algorithm does on a number of small trees, as well as a pacman game. To run it without graphics, use:\npython autograder.py -q q2 --no-graphics\n\n\n\n\n\n\nHints and Observations\n\n\n\n\nImplement the algorithm recursively using helper function(s).\nThe correct implementation of minimax will lead to Pacman losing the game in some tests. This is not a problem: as it is correct behavior, it will pass the tests for full credit.\nThe evaluation function for the Pacman test in this part is already written (self.evaluationFunction). You shouldn’t change this function, but recognize that now we’re evaluating states rather than actions, as we were for the reflex agent. Look-ahead agents evaluate future states whereas reflex agents evaluate actions from the current state.\nThe minimax values of the initial state in the minimaxClassic layout are 9, 8, 7, -492 for depths 1, 2, 3 and 4 respectively. Note that your minimax agent will often win (665/1000 games for us) despite the dire prediction of depth 4 minimax.\n  python pacman.py -p MinimaxAgent -l minimaxClassic -a depth=4\nPacman is always agent 0, and the agents move in order of increasing agent index.\nAll states in minimax should be GameStates, either passed in to getAction or generated via GameState.generateSuccessor. You will not be abstracting to simplified states.\nOn larger boards such as openClassic and mediumClassic (the default), you’ll find Pacman to be good at not dying, but quite bad at winning. He’ll often thrash around without making progress. He might even thrash around right next to a dot without eating it because he doesn’t know where he’d go after eating that dot. Don’t worry if you see this behavior, question 5 will clean up all of these issues.\nWhen the Pacman believes that his death is unavoidable, he will try to end the game as soon as possible because of the constant penalty for living. Sometimes, this is the wrong thing to do with random ghosts, but minimax agents always assume the worst:\n  python pacman.py -p MinimaxAgent -l trappedClassic -a depth=3\nMake sure you understand why Pacman rushes the closest ghost in this case."
  },
  {
    "objectID": "4511/hw/hw2.html#q3-5-pts-alpha-beta-pruning",
    "href": "4511/hw/hw2.html#q3-5-pts-alpha-beta-pruning",
    "title": "Homework Two",
    "section": "5 Q3 (5 pts): Alpha-Beta Pruning",
    "text": "5 Q3 (5 pts): Alpha-Beta Pruning\nMake a new agent that uses alpha-beta pruning to more efficiently explore the minimax tree, in AlphaBetaAgent. Again, your algorithm will be slightly more general than the pseudocode from lecture, so part of the challenge is to extend the alpha-beta pruning logic appropriately to multiple minimizer agents.\nYou should see a speed-up (perhaps depth 3 alpha-beta will run as fast as depth 2 minimax). Ideally, depth 3 on smallClassic should run in just a few seconds per move or faster.\npython pacman.py -p AlphaBetaAgent -a depth=3 -l smallClassic\nThe AlphaBetaAgent minimax values should be identical to the MinimaxAgent minimax values, although the actions it selects can vary because of different tie-breaking behavior. Again, the minimax values of the initial state in the minimaxClassic layout are 9, 8, 7 and -492 for depths 1, 2, 3 and 4 respectively.\nGrading: Because we check your code to determine whether it explores the correct number of states, it is important that you perform alpha-beta pruning without reordering children. In other words, successor states should always be processed in the order returned by GameState.getLegalActions. Again, do not call GameState.generateSuccessor more than necessary.\nYou must not prune on equality in order to match the set of states explored by our autograder. (Indeed, alternatively, but incompatible with our autograder, would be to also allow for pruning on equality and invoke alpha-beta once on each child of the root node, but this will not match the autograder.)\nThe pseudo-code below represents the algorithm you should implement for this question. It varies from the reference implementation of Alpha-Beta pruning in the text/lecture by capturing more than two agents with a scalar value \\(v\\) (because the ghosts are all cooperating to defeat the Pacman).\n\n\n\\begin{algorithm} \\caption{Alpha-Beta Pruning} \\begin{algorithmic} \\Function{Max-Value}{$state, \\alpha, \\beta$} \\State $v \\gets -\\infty$ \\State $successors \\gets$ \\textsc{Expand}($state$) \\For{\\textbf{each} $s$ \\textbf{in} $successors$} \\State $v \\gets$ \\Call{Max}{$v$, \\textsc{Min-Value}($successor, \\alpha, \\beta$)} \\If{$v &gt; \\beta$} \\State \\textbf{return} $v$ \\EndIf \\State $\\alpha \\gets$ \\Call{Max}{$\\alpha, v$} \\EndFor \\State \\textbf{return} $v$ \\EndFunction \\State \\Function{Min-Value}{$state, \\alpha, \\beta$} \\State $v \\gets \\infty$ \\State $successors \\gets$ \\textsc{Expand}($state$) \\For{\\textbf{each} $s$ \\textbf{in} $successors$} \\State $v \\gets$ \\Call{Min}{$v$, \\textsc{Value}($successor, \\alpha, \\beta$)} \\If{$v &lt; \\alpha$} \\State \\textbf{return} $v$ \\EndIf \\State $\\beta \\gets$ \\Call{Min}{$\\beta, v$} \\EndFor \\State \\textbf{return} $v$ \\EndFunction \\State \\Function{Value}{$state, \\alpha, \\beta$} \\If{\\Call{NextAgent}{$state$} is $Max$} \\State \\textbf{return} \\Call{Max-Value}{$state, \\alpha, \\beta$} \\EndIf \\State \\textbf{return} \\Call{Min-Value}{$state, \\alpha, \\beta$} \\EndFunction \\end{algorithmic} \\end{algorithm}\n\n\nTo test and debug your code, run\npython autograder.py -q q3\nThis will show what your algorithm does on a number of small trees, as well as a pacman game. To run it without graphics, use:\npython autograder.py -q q3 --no-graphics\nThe correct implementation of alpha-beta pruning will lead to Pacman losing the game for some of the tests. This is not a problem: as it is correct behavior, you will earn full credit."
  },
  {
    "objectID": "4511/hw/hw2.html#q4-5-pts-expectimax",
    "href": "4511/hw/hw2.html#q4-5-pts-expectimax",
    "title": "Homework Two",
    "section": "6 Q4 (5 pts): Expectimax",
    "text": "6 Q4 (5 pts): Expectimax\nMinimax and alpha-beta are great, but they both assume that you are playing against an adversary who makes optimal decisions. As anyone who has ever won tic-tac-toe can tell you, this is not always the case. In this question you will implement the ExpectimaxAgent, which is useful for modeling probabilistic behavior of agents who may make suboptimal choices.\nAs with the search and problems yet to be covered in this class, the beauty of these algorithms is their general applicability. To expedite your own development, we’ve supplied some test cases based on generic trees. You can debug your implementation on small the game trees using the command:\npython autograder.py -q q4\nDebugging on these small and manageable test cases is recommended and will help you to find bugs quickly.\nOnce your algorithm is working on small trees, you can observe its success in Pacman. Random ghosts are of course not optimal minimax agents, and so modeling them with minimax search may not be appropriate. ExpectimaxAgent will no longer take the min over all ghost actions, but the expectation according to your agent’s model of how the ghosts act. To simplify your code, assume you will only be running against an adversary which chooses amongst their getLegalActions uniformly at random.\nTo see how the ExpectimaxAgent behaves in Pacman, run:\npython pacman.py -p ExpectimaxAgent -l minimaxClassic -a depth=3\nYou should now observe a more cavalier approach in close quarters with ghosts. In particular, if Pacman perceives that he could be trapped but might escape to grab a few more pieces of food, he’ll at least try. Investigate the results of these two scenarios:\npython pacman.py -p AlphaBetaAgent -l trappedClassic -a depth=3 -q -n 10\npython pacman.py -p ExpectimaxAgent -l trappedClassic -a depth=3 -q -n 10\nYou should find that your ExpectimaxAgent wins about half the time, while your AlphaBetaAgent always loses. Make sure you understand why the behavior here differs from the minimax case.\nThe correct implementation of expectimax will lead to Pacman losing some of the tests. This is not a problem: as it is correct behaviour, it will pass the tests."
  },
  {
    "objectID": "4511/hw/hw2.html#q5-6-pts-evaluation-function",
    "href": "4511/hw/hw2.html#q5-6-pts-evaluation-function",
    "title": "Homework Two",
    "section": "7 Q5 (6 pts): Evaluation Function",
    "text": "7 Q5 (6 pts): Evaluation Function\nWrite a better evaluation function for Pacman in the provided function betterEvaluationFunction. The evaluation function should evaluate states, rather than actions like your reflex agent evaluation function did. With depth 2 search, your evaluation function should clear the smallClassic layout with one random ghost more than half the time and still run at a reasonable rate (to get full credit, Pacman should be averaging around 1000 points when he’s winning).\nGrading: the autograder will run your agent on the smallClassic layout 10 times. We will assign points to your evaluation function in the following way:\n\nIf you win at least once without timing out the autograder, you receive 1 points. Any agent not satisfying these criteria will receive 0 points.\n+1 for winning at least 5 times, +2 for winning all 10 times\n+1 for an average score of at least 500, +2 for an average score of at least 1000 (including scores on lost games)\n+1 if your games take on average less than 30 seconds on the autograder machine, when run with --no-graphics.\nThe additional points for average score and computation time will only be awarded if you win at least 5 times.\nPlease do not copy any files from the previous assignment, as it will not pass the autograder on the submit server.\n\nYou can try your agent out under these conditions with\npython autograder.py -q q5\nTo run it without graphics, use:\npython autograder.py -q q5 --no-graphics"
  },
  {
    "objectID": "4511/hw/hw3draft.html",
    "href": "4511/hw/hw3draft.html",
    "title": "Homework Three",
    "section": "",
    "text": "This is a draft assignment. It isn’t linked from the main page, and is not released yet. Please don’t spend time on it, because it might change before it’s released.\n\n\nIn this homework assignment, you will write a basic scheduling agent for an air freight terminal. This is a simplification1 of a real-world problem: creating a schedule for the loading and unloading of cargo.\n1 An extreme simplification.\n\n\nYou may, optionally, collaborate with one (1) other person on this assignment. You must explicitly state who this person is in the initial comments of your program. If you choose to do this, both of you must submit separately, and both of you will be responsible for completely understanding how your program works.\n\n\n\nFiles to Submit: You will write one ‘main’ file: terminalScheduler.py. Once you have completed the assignment, submit this file to the submit server. Please submit a single (uncompressed) .tar containing this file at the root of the tar, along with associated files you create. (Your homework could possibly be completed with just this file.) Include a comment at the start of terminalScheduler.py indicating what help, if any, you got on this assignment. If you didn’t get any help, indicate this. Failure to include this comment will result in losing 10 points on the assignment grade.\nEvaluation: Evaluation of your code’s correctness will be performed by the autograder. If you think your code is correct and the autograder is in error, bring this to my attention before the submission deadline. Point values are relative within each assignment: all assignments are scaled to 100 when calculating grades. The server will allow you to submit multiple times for credit, but please run the autograder locally first.\nAcademic Dishonesty: This assignment is individual effort, with the option to work with one partner. Please review the collaboration policy for the course and adhere to it.\n\n\n\nBecause any grading script would also be a partial solution, no local autograder is provided. You can submit unlimited times to the “test” autograder on the server, and ten times to the “credit” autograder on the server.\n\n\n\nAn air cargo terminal receives aircraft loaded with freight, unloads the aircraft, sorts the cargo, and transfers the cargo to trucks for distribution.\n\n\nAircraft arrive on a schedule. Each arriving aircraft has:\n\nA unique name\nAn arrival time\nA cargo manifest:\n\nThe manifest indicates how many cargo pallets are carried on the aircraft\n\n\nScheduling: Aircraft must be scheduled to unload at hangars at specific times.\n\n\n\nAircraft are unloaded at hangars. Each terminal hangar can handle one aircraft at a time.\nAfter pallets are unloaded, they are stored at the hangar until they are subsequently loaded onto a cargo truck\n\n\n\nAircraft are unloaded by forklifts. Each forklift can unload one pallet in 20 minutes.\n\nAny number of forklifts can work to unload a plane at any time\nOne pallet can only be unloaded by one forklift\nTo illustrate:\n\nIf a plane is loaded with two pallets, one forklift will unload the plane in 40 minutes\nIf a plane is loaded with two pallets, two forklifts will unload the plane in 20 minutes\nIf a plane is loaded with two pallets, three forklifts will unload the plane in 20 minutes\n\nEach of the two pallets is already being unloaded, so the third forklift has nothing to do\n\nAdditionally, forklifts work independently:\n\nA plane is loaded with two pallets and arrives at 0900\nOne forklift arrives to unload at 0900\nAnother forklift arrives to unload at 0905\nThe first pallet finishes unloading at 0920\nThe second (final) pallet finishes unloading at 0925\n\n\nAssume it takes no time for a forklift to move from one hangar to another\n\nScheduling:\n\nForklifts must be scheduled to work at hangars at specific times.\nForklifts must be scheduled to unload an aircraft or load a truck (see below)\n\n\n\n\nEach cargo truck can receive one pallet. Cargo trucks are loaded by forklifts, similar to how aircraft are unloaded by forklifts. Each forklift can load one pallet in 5 minutes:\n\nA cargo truck can be loaded by one forklift in 5 minutes\nA cargo truck can be loaded by two forklifts in 5 minutes\n\nThe pallet is already being loaded, so the second forklift has nothing to do\n\nEach hangar can accommodate one truck at any given time\nAssume the truck leaves as soon as it is loaded\n\nScheduling:\n\nCargo trucks must be scheduled to be loaded at hangars at specific times.\n\n\n\n\n\n\nEach aircraft must be scheduled to arrive a specific hangar at a specific time\n\nThe time must be after the plane arrives at the terminal\nThe aircraft must be scheduled to depart from the hangar after it is finished unloading\n\nForklifts must be assigned to a specific hangar\n\nEach forklift must be assigned to load or unload at a specific hangar at a specific time\nA forklift can only unload if there is a plane with cargo waiting to be unloaded\nA forklift can only load if there is a truck waiting to be loaded and a pallet to load\n\n\nTime is always expressed as minutes on a 24h clock, i.e. 900 is five minutes after 855 and 1300 is five minutes after 1255. Events should be scheduled to the closest five minutes (e.g. 1000, 1005, 1010) and not more granularly.\nThe scheduling problem is solved if an assignment of aircraft, forklifts, and trucks results in all cargo being unloaded from aircraft and loaded onto trucks by the end of the day.\n\n\n\nThe meta.json file indicates what hangars are available and what forklifts are available. There is also a start time and a start time for the day’s work: all jobs must be scheduled after the start time and before the stop time.\n\n\nmeta.json\n\n{\n    \"Start Time\": 730,\n    \"Stop Time\": 1100,\n    \"Hangars\": [\"North Hangar\", \"South Hangar\"],\n    \"Forklifts\": [\"F01\", \"F02\"]\n  }\n\n\nHangars will be named via an arbitrary unique string.\n\nThe aircraft.json file indicates the arrival schedule of aircraft:\n\n\naircraft.json\n\n{\n    \"D213\": {\n      \"Time\": 805, \"Cargo\": 2\n      },\n    \"AT-LX-2Y2\": {\n      \"Time\": 815, \"Cargo\": 1\n      },\n    \"NW-19-1A\": {\n    \"Time\": 945, \"Cargo\": 1\n    }\n  }\n\n\nAircraft will be named via an arbitrary unique string.\n\nThe trucks.json file indicates the arrival schedule of aircraft:\n\n\ntrucks.json\n\n{\n    \"JLX-9828\": 745,\n    \"PK2-341\": 735,\n    \"ADR-005\": 1020,\n    \"TX-241-Y\": 755\n  }\n\n\nTrucks will be named via an arbitrary unique string.\n\n\n\n\n\n\n\nData Format - Solution\n\n\n\n\n\n\n\nschedule.json\n\n{\n    \"aircraft\": {\n        \"D213\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 810,\n            \"Departure\": 830\n        },\n        \"AT-LX-2Y2\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 830,\n            \"Departure\": 850\n        },\n        \"NW-19-1A\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 950,\n            \"Departure\": 1010\n        }\n    },\n    \"trucks\": {\n        \"JLX-9828\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 830,\n            \"Departure\": 835\n        },\n        \"PK2-341\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 835,\n            \"Departure\": 840\n        },\n        \"ADR-005\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 1020,\n            \"Departure\": 1025\n        },\n        \"TX-241-Y\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 850,\n            \"Departure\": 855\n        }\n    },\n    \"forklifts\": {\n        \"F01\": [\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 810,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 830,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 835,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 850,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 950,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 1020,\n                \"Job\": \"Load\"\n            }\n        ],\n        \"F02\": [\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 810,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 830,\n                \"Job\": \"Unload\"\n            }\n        ]\n    }\n}\n\n\n\n\n\n\n\n\nFirst, frame the problem as an assignment of values to variables:\n\nYou will need to determine what the variables are\nYou will need to determine what the domains of each variable are\nYou will need to express the constraints\n\nImplement an algorithm that assigns values to variables, consistent with constraints\n\nNaive recursive backtracking search is the easiest method\nYou are welcome to use inferences such as AC3\nApproaches less efficient than backtracking search may time out the autograding server, and will not receive credit\n\nDo not use any libraries that solve constraint satisfaction or SAT problems.\n\n\n\n\n\nYour scheduler should run from terminalScheduler.py\n\nYou can write other modules if you like\n\nterminalScheduler.py should require four command-line arguments in this order:\n\n-meta_path for the meta.json file\n-aircraft_path for the aircraft.json file\n-trucks_path for the trucks.json file\n-schedule_path for the name of the output schedule.json\n\n\nCalling:\nterminalScheduler.py META_PATH AIRCRAFT_PATH TRUCKS_PATH SCHEDULE_PATH\nshould run your scheduler on the meta.json, aircraft.json, and trucks.json input files and and write the output to schedule.json."
  },
  {
    "objectID": "4511/hw/hw3draft.html#introduction",
    "href": "4511/hw/hw3draft.html#introduction",
    "title": "Homework Three",
    "section": "",
    "text": "In this homework assignment, you will write a basic scheduling agent for an air freight terminal. This is a simplification1 of a real-world problem: creating a schedule for the loading and unloading of cargo.\n1 An extreme simplification."
  },
  {
    "objectID": "4511/hw/hw3draft.html#collaboration",
    "href": "4511/hw/hw3draft.html#collaboration",
    "title": "Homework Three",
    "section": "",
    "text": "You may, optionally, collaborate with one (1) other person on this assignment. You must explicitly state who this person is in the initial comments of your program. If you choose to do this, both of you must submit separately, and both of you will be responsible for completely understanding how your program works."
  },
  {
    "objectID": "4511/hw/hw3draft.html#submitting",
    "href": "4511/hw/hw3draft.html#submitting",
    "title": "Homework Three",
    "section": "",
    "text": "Files to Submit: You will write one ‘main’ file: terminalScheduler.py. Once you have completed the assignment, submit this file to the submit server. Please submit a single (uncompressed) .tar containing this file at the root of the tar, along with associated files you create. (Your homework could possibly be completed with just this file.) Include a comment at the start of terminalScheduler.py indicating what help, if any, you got on this assignment. If you didn’t get any help, indicate this. Failure to include this comment will result in losing 10 points on the assignment grade.\nEvaluation: Evaluation of your code’s correctness will be performed by the autograder. If you think your code is correct and the autograder is in error, bring this to my attention before the submission deadline. Point values are relative within each assignment: all assignments are scaled to 100 when calculating grades. The server will allow you to submit multiple times for credit, but please run the autograder locally first.\nAcademic Dishonesty: This assignment is individual effort, with the option to work with one partner. Please review the collaboration policy for the course and adhere to it."
  },
  {
    "objectID": "4511/hw/hw3draft.html#autograder",
    "href": "4511/hw/hw3draft.html#autograder",
    "title": "Homework Three",
    "section": "",
    "text": "Because any grading script would also be a partial solution, no local autograder is provided. You can submit unlimited times to the “test” autograder on the server, and ten times to the “credit” autograder on the server."
  },
  {
    "objectID": "4511/hw/hw3draft.html#the-problem",
    "href": "4511/hw/hw3draft.html#the-problem",
    "title": "Homework Three",
    "section": "",
    "text": "An air cargo terminal receives aircraft loaded with freight, unloads the aircraft, sorts the cargo, and transfers the cargo to trucks for distribution.\n\n\nAircraft arrive on a schedule. Each arriving aircraft has:\n\nA unique name\nAn arrival time\nA cargo manifest:\n\nThe manifest indicates how many cargo pallets are carried on the aircraft\n\n\nScheduling: Aircraft must be scheduled to unload at hangars at specific times.\n\n\n\nAircraft are unloaded at hangars. Each terminal hangar can handle one aircraft at a time.\nAfter pallets are unloaded, they are stored at the hangar until they are subsequently loaded onto a cargo truck\n\n\n\nAircraft are unloaded by forklifts. Each forklift can unload one pallet in 20 minutes.\n\nAny number of forklifts can work to unload a plane at any time\nOne pallet can only be unloaded by one forklift\nTo illustrate:\n\nIf a plane is loaded with two pallets, one forklift will unload the plane in 40 minutes\nIf a plane is loaded with two pallets, two forklifts will unload the plane in 20 minutes\nIf a plane is loaded with two pallets, three forklifts will unload the plane in 20 minutes\n\nEach of the two pallets is already being unloaded, so the third forklift has nothing to do\n\nAdditionally, forklifts work independently:\n\nA plane is loaded with two pallets and arrives at 0900\nOne forklift arrives to unload at 0900\nAnother forklift arrives to unload at 0905\nThe first pallet finishes unloading at 0920\nThe second (final) pallet finishes unloading at 0925\n\n\nAssume it takes no time for a forklift to move from one hangar to another\n\nScheduling:\n\nForklifts must be scheduled to work at hangars at specific times.\nForklifts must be scheduled to unload an aircraft or load a truck (see below)\n\n\n\n\nEach cargo truck can receive one pallet. Cargo trucks are loaded by forklifts, similar to how aircraft are unloaded by forklifts. Each forklift can load one pallet in 5 minutes:\n\nA cargo truck can be loaded by one forklift in 5 minutes\nA cargo truck can be loaded by two forklifts in 5 minutes\n\nThe pallet is already being loaded, so the second forklift has nothing to do\n\nEach hangar can accommodate one truck at any given time\nAssume the truck leaves as soon as it is loaded\n\nScheduling:\n\nCargo trucks must be scheduled to be loaded at hangars at specific times."
  },
  {
    "objectID": "4511/hw/hw3draft.html#scheduling",
    "href": "4511/hw/hw3draft.html#scheduling",
    "title": "Homework Three",
    "section": "",
    "text": "Each aircraft must be scheduled to arrive a specific hangar at a specific time\n\nThe time must be after the plane arrives at the terminal\nThe aircraft must be scheduled to depart from the hangar after it is finished unloading\n\nForklifts must be assigned to a specific hangar\n\nEach forklift must be assigned to load or unload at a specific hangar at a specific time\nA forklift can only unload if there is a plane with cargo waiting to be unloaded\nA forklift can only load if there is a truck waiting to be loaded and a pallet to load\n\n\nTime is always expressed as minutes on a 24h clock, i.e. 900 is five minutes after 855 and 1300 is five minutes after 1255. Events should be scheduled to the closest five minutes (e.g. 1000, 1005, 1010) and not more granularly.\nThe scheduling problem is solved if an assignment of aircraft, forklifts, and trucks results in all cargo being unloaded from aircraft and loaded onto trucks by the end of the day."
  },
  {
    "objectID": "4511/hw/hw3draft.html#data-format---problem",
    "href": "4511/hw/hw3draft.html#data-format---problem",
    "title": "Homework Three",
    "section": "",
    "text": "The meta.json file indicates what hangars are available and what forklifts are available. There is also a start time and a start time for the day’s work: all jobs must be scheduled after the start time and before the stop time.\n\n\nmeta.json\n\n{\n    \"Start Time\": 730,\n    \"Stop Time\": 1100,\n    \"Hangars\": [\"North Hangar\", \"South Hangar\"],\n    \"Forklifts\": [\"F01\", \"F02\"]\n  }\n\n\nHangars will be named via an arbitrary unique string.\n\nThe aircraft.json file indicates the arrival schedule of aircraft:\n\n\naircraft.json\n\n{\n    \"D213\": {\n      \"Time\": 805, \"Cargo\": 2\n      },\n    \"AT-LX-2Y2\": {\n      \"Time\": 815, \"Cargo\": 1\n      },\n    \"NW-19-1A\": {\n    \"Time\": 945, \"Cargo\": 1\n    }\n  }\n\n\nAircraft will be named via an arbitrary unique string.\n\nThe trucks.json file indicates the arrival schedule of aircraft:\n\n\ntrucks.json\n\n{\n    \"JLX-9828\": 745,\n    \"PK2-341\": 735,\n    \"ADR-005\": 1020,\n    \"TX-241-Y\": 755\n  }\n\n\nTrucks will be named via an arbitrary unique string.\n\n\n\n\n\n\n\nData Format - Solution\n\n\n\n\n\n\n\nschedule.json\n\n{\n    \"aircraft\": {\n        \"D213\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 810,\n            \"Departure\": 830\n        },\n        \"AT-LX-2Y2\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 830,\n            \"Departure\": 850\n        },\n        \"NW-19-1A\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 950,\n            \"Departure\": 1010\n        }\n    },\n    \"trucks\": {\n        \"JLX-9828\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 830,\n            \"Departure\": 835\n        },\n        \"PK2-341\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 835,\n            \"Departure\": 840\n        },\n        \"ADR-005\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 1020,\n            \"Departure\": 1025\n        },\n        \"TX-241-Y\": {\n            \"Hangar\": \"North Hangar\",\n            \"Arrival\": 850,\n            \"Departure\": 855\n        }\n    },\n    \"forklifts\": {\n        \"F01\": [\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 810,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 830,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 835,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 850,\n                \"Job\": \"Load\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 950,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 1020,\n                \"Job\": \"Load\"\n            }\n        ],\n        \"F02\": [\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 810,\n                \"Job\": \"Unload\"\n            },\n            {\n                \"Hangar\": \"North Hangar\",\n                \"Time\": 830,\n                \"Job\": \"Unload\"\n            }\n        ]\n    }\n}"
  },
  {
    "objectID": "4511/hw/hw3draft.html#how-to-solve-it",
    "href": "4511/hw/hw3draft.html#how-to-solve-it",
    "title": "Homework Three",
    "section": "",
    "text": "First, frame the problem as an assignment of values to variables:\n\nYou will need to determine what the variables are\nYou will need to determine what the domains of each variable are\nYou will need to express the constraints\n\nImplement an algorithm that assigns values to variables, consistent with constraints\n\nNaive recursive backtracking search is the easiest method\nYou are welcome to use inferences such as AC3\nApproaches less efficient than backtracking search may time out the autograding server, and will not receive credit\n\nDo not use any libraries that solve constraint satisfaction or SAT problems."
  },
  {
    "objectID": "4511/hw/hw3draft.html#implementation",
    "href": "4511/hw/hw3draft.html#implementation",
    "title": "Homework Three",
    "section": "",
    "text": "Your scheduler should run from terminalScheduler.py\n\nYou can write other modules if you like\n\nterminalScheduler.py should require four command-line arguments in this order:\n\n-meta_path for the meta.json file\n-aircraft_path for the aircraft.json file\n-trucks_path for the trucks.json file\n-schedule_path for the name of the output schedule.json\n\n\nCalling:\nterminalScheduler.py META_PATH AIRCRAFT_PATH TRUCKS_PATH SCHEDULE_PATH\nshould run your scheduler on the meta.json, aircraft.json, and trucks.json input files and and write the output to schedule.json."
  },
  {
    "objectID": "4511/notes/01/python.html",
    "href": "4511/notes/01/python.html",
    "title": "Python Notes",
    "section": "",
    "text": "These notes are meant to accompany a lecture in the course. If you are looking for a full Python reference, I recommend the full Python reference."
  },
  {
    "objectID": "4511/notes/01/python.html#whitespace-syntax",
    "href": "4511/notes/01/python.html#whitespace-syntax",
    "title": "Python Notes",
    "section": "Whitespace Syntax",
    "text": "Whitespace Syntax\nPython formally uses whitespace as part of its syntax. Examples:\nYou may be used to languages ending logical lines with a semicolon: ;. Python ends logical lines with a carriage return (a new line).\nCompare Java:\nSystem.out.println(\"Hello\");\nSystem.out.println(\"World\");\nwith Python:\nprint(\"Hello\")\nprint(\"World\")\n\n\n\n\n\n\nExtending Logical Lines in Python\n\n\n\n\n\nYou can extend a logical line of code over multiple lines using backslash characters:\nprint(\"Hello \\\n\")\nprint(\"World\")\nLogical lines can be extended inside of groupings such as arrays:\nx = [1, 2, 3,\n     4, 5, 6]\n\n\n\n\nWhere languages like Java use curly braces { and } to group statements, Python typically uses indentation.\nCompare Java:\nfor (int i = 0; i &lt; 5; i++) {\n  System.out.println(i);\n}\nwith Python:\nfor i in range(5):\n    print(i) # note that the print statement is indented \nThe above also demonstrates:\n\nComments are indicated with #\nfor loop syntax is concise\n\nDeclaration of i and incrementing i += 1 are implied\nPython does not have ++, use +=1\n\nThings that are associated with groups of statements end in a colon :\n\nNesting loops and/or conditionals uses multiple levels of indentation:\nfor i in range(3):\n    for j in range(4):\n        print(i+j)\n        print(i*j)"
  },
  {
    "objectID": "4511/notes/01/python.html#the-interpreter",
    "href": "4511/notes/01/python.html#the-interpreter",
    "title": "Python Notes",
    "section": "The Interpreter",
    "text": "The Interpreter\nYou can run the Python interpreter from the command line and experiment with code. Open a terminal and simply run python."
  },
  {
    "objectID": "4511/notes/01/python.html#operators",
    "href": "4511/notes/01/python.html#operators",
    "title": "Python Notes",
    "section": "Operators",
    "text": "Operators\nBasic math operators work similarly in Python and Java:\n\nprint(1 + 2)\n\n3\n\n\n\nprint(1 * 2)\n\n2\n\n\n\nprint(1 / 2)\n\n0.5\n\n\nDividing two integers (or any two numbers) with / automatically yields a float. Quotient/remainder is available with the quotient // and remainder % operators:\n\nprint(7 // 2)\n\n3\n\n\n\nprint(7 % 2)\n\n1\n\n\nThese are not constrained to integers:\n\nprint(6 // 2.5)\n\n2.0\n\n\n\nprint(6 % 2.5)\n\n1.0\n\n\nOperators like + and * work like math operators when the things on both sides of them are numbers. They do other things when they’re around strings.\n+ concatenates:\n\nprint(\"Fizz\" + \"Buzz\")\n\nFizzBuzz\n\n\n* extends the string, when used with an integer:\n\nprint(\"Fizz\" * 5)\n\nFizzFizzFizzFizzFizz\n\n\nThe above ‘multiplication’ operation would be nonsensical with a float instead of an int, or with two strings, and trying it will give you an error.\nPowers can be raised with **:\n\nprint(2**3)\n\n8\n\n\nThere is also a well-documented math library for things like square roots.\n\nimport math\n\nprint(math.sqrt(2))\n\n1.4142135623730951\n\n\nNote: There is nothing wrong with the math library, but most people use numpy for math these days.\n\nimport numpy as np\n\nprint(np.sqrt(2))\n\n1.4142135623730951"
  },
  {
    "objectID": "4511/notes/01/python.html#conditionals",
    "href": "4511/notes/01/python.html#conditionals",
    "title": "Python Notes",
    "section": "Conditionals",
    "text": "Conditionals\nConditionals are expressed with if, elif, and else:\n\nThe if is required.\n\nAny whole number of elifs are allowed.\n\nZero or one elses are allowed, and the else always comes last.\n\nSyntax uses colons and indentation, just like loops.\n\nx = 5\n\nif x &gt; 10:\n    print(\"x is huge\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelif x &gt; 0:\n    print(\"x can be counted on fingers\")\nelse:\n    print(\"x is zero\")\n\nx can be counted on fingers\n\n\n(This is a very silly example.)\nThere is an extremely powerful match case conditional syntax which you can use.1 Read about it here\n1 If you are extremely powerful."
  },
  {
    "objectID": "4511/notes/01/python.html#types-and-variables",
    "href": "4511/notes/01/python.html#types-and-variables",
    "title": "Python Notes",
    "section": "Types and Variables",
    "text": "Types and Variables\nPython has types, but variables do not have types at compile time. Compared to Java, this might seem confusing. You can think of variables as pointing to objects that have types (Python also does not, explicitly, have pointers):\nx = 126\ny = \"sunset\"\nz = 12.6\n\n\n\n\n\n\n\n\n\nVariables can be reassigned without regard to the type the variable is pointing at:\nx = 126\nx = \"sunrise\"\n\n\n\nAssigning a variable to another variable assigns it to wherever the other variable is pointing:\n\nx = 126\ny = \"sunset\"\nx = y\nprint(x)\n\nsunset\n\n\n\n\n\nReassigning the other variable doesn’t change the first variable:\n\nx = 126\ny = \"sunset\"\nx = y\ny = \"sunrise\"\nprint(x)\n\nsunset"
  },
  {
    "objectID": "4511/notes/01/python.html#lists",
    "href": "4511/notes/01/python.html#lists",
    "title": "Python Notes",
    "section": "Lists",
    "text": "Lists\nLists are delimited with square brackets [ and ].\n\nx = [5, 6, 7]\nprint(x)\n\n[5, 6, 7]\n\n\nThey are not typed and can contain whatever you want. Or, for the imaginative, they can contain any type of object.\n\nx = [126, \"sunset\", 12.6]\nprint(x)\n\n[126, 'sunset', 12.6]\n\n\nIndividual list elements can be accessed via “slicing.” Note that lists are 0-indexed.\n\nx = [126, \"sunset\", 12.6]\nprint(x[1])\n\nsunset\n\n\nIndividual elements of a list can be modified:\n\nx = [126, \"sunset\", 12.6]\nx[1] = \"sunrise\"\nprint(x)\n\n[126, 'sunrise', 12.6]\n\n\nLists are collections of references to variables and behave differently with respect to assignment. Specifically, assigning a variable to another variable that references a list will cause both variables to reference the same list object:\n\nx = [126, \"sunset\", 12.6]\ny = x\nprint(y)\n\n[126, 'sunset', 12.6]\n\n\n\n\n\nChanging x also changes y, since they reference the same thing:\n\nx = [126, \"sunset\", 12.6]\ny = x\nx[1] = \"sunrise\"\nprint(y)\n\n[126, 'sunrise', 12.6]\n\n\n\n\n\nSlicing can access more than one element:\n\nx = [126, \"sunset\", 12.6]\nprint(x[1:3])\n\n['sunset', 12.6]\n\n\nStrings can also be sliced:\n\nx = \"sunrise\"\nprint(x[0:3])\n\nsun\n\n\nMore details about slicing in the docs.\nLists can be concatenated with +, which returns a new list:\n\nx = [1, 2, 3] + [4, 5, 6]\nprint(x)\n\n[1, 2, 3, 4, 5, 6]\n\n\nLists have no fixed length, they can be lengthened in place with append()\n\nx = [\"sunrise\"]\nx.append(\"sunset\")\nprint(x)\n\n['sunrise', 'sunset']"
  },
  {
    "objectID": "4511/notes/01/python.html#tuples",
    "href": "4511/notes/01/python.html#tuples",
    "title": "Python Notes",
    "section": "Tuples",
    "text": "Tuples\nTuples are similar to lists, but they are immutable. They are optionally delimited with parentheses ( and )\n\nx = (\"sunrise\", \"sunset\")\nprint(x[1])\ny = \"duck\", \"teal\"\nprint(y[0])\n\nsunset\nduck\n\n\nWhile the parentheses are optional, they are typically used.\nTuples can also be used for multiple assignment:\n\nA, B = 1, 2\nprint(A)\nprint(B)\n\n1\n2"
  },
  {
    "objectID": "4511/notes/01/python.html#dicts",
    "href": "4511/notes/01/python.html#dicts",
    "title": "Python Notes",
    "section": "Dicts",
    "text": "Dicts\nHash tables in Python are called dictionaries, or “dicts.” They consist of key-value pairs. They are delimited with curly braces { and }.\nThis dict has one pair: the key is 'sunrise' (a string) and the value is 126 (an int).\n\nx = {'sunrise': 126}\nprint(x)\n\n{'sunrise': 126}\n\n\n\nKeys and values can be any variable type. Values can be lists or dicts, but keys cannot (since these cannot be hashed.)\n\nDict values can be accessed via their keys:\n\nx = {'sunrise': 126}\nprint(x['sunrise'])\n\n126\n\n\nDict values can also be changed or added via their keys:\n\nx = {'sunrise': 126}\nx['sunrise'] = 127\nx['sunset'] = 12.6\nprint(x)\n\n{'sunrise': 127, 'sunset': 12.6}"
  },
  {
    "objectID": "4511/notes/01/python.html#looping",
    "href": "4511/notes/01/python.html#looping",
    "title": "Python Notes",
    "section": "Looping",
    "text": "Looping\nPython has several ways to loop through things.\nVia index:\n\nL = [\"cat\", \"dog\", \"owl\"]\nfor j in range(3):\n    print(L[j], end=\" - \")\n\ncat - dog - owl - \n\n\n\nVia content:\n\nL = [\"cat\", \"dog\", \"owl\"]\nfor j in L:\n    print(j, end= \" - \")\n\ncat - dog - owl - \n\n\n\nenumerate 😌\n\nL = [\"cat\", \"dog\", \"owl\"]\nfor j, item in enumerate(L):\n    print(item, j, end=\" - \")\n\ncat 0 - dog 1 - owl 2 - \n\n\n\nLooping directly through a dict iterates over keys:2\n2 Note the f-string\nA = {\"carl\": 5, \"otis\": 6, \"alan\": 2}\nfor j in A:\n    print(f\"{j}:{A[j]}\", end=\" - \")\n\ncarl:5 - otis:6 - alan:2 - \n\n\nYou can also iterate over the values:\n\nA = {\"carl\": 5, \"otis\": 6, \"alan\": 2}\nfor j in A.values():\n    print(j, end=\" - \")\n\n5 - 6 - 2 - \n\n\nOr the items:\n\nA = {\"carl\": 5, \"otis\": 6, \"alan\": 2}\nfor i, j in A.items():\n    print(i, j, end=\" - \")\n\ncarl 5 - otis 6 - alan 2 - \n\n\n\nThere are while loops:\n\nL = [\"cat\", \"dog\", \"hoss\", \"owl\"]\ni = 0\nwhile len(L[i]) == 3:\n    i += 1\nprint(L[i])\n\nhoss"
  },
  {
    "objectID": "4511/notes/01/python.html#booleans",
    "href": "4511/notes/01/python.html#booleans",
    "title": "Python Notes",
    "section": "Booleans",
    "text": "Booleans\nPython uses and, or and not for boolean logic. Equality operators are the same as Java (==, &lt;, !=, etc.). Parentheses aren’t enforced, but it’s a fine idea to use them anyway.\nBools can take on either True and False.\n\nprint(1 != 2)\nprint(4 &lt;= 3)\nprint(0.1 + 0.2 == 0.3)\n\nTrue\nFalse\nFalse\n\n\nBoolean operators short-circuit, which means:\n\nIf the left side of an and is False, the right side isn’t evaluated.\nIf the left side of an or is True, the right side isn’t evaluated.\n\n\nprint((1 &gt; 0) or nonsense)\n\nTrue\n\n\nnonsense above isn’t defined but the reference is never reached, so the program runs without error. Short-circuiting is occasionally useful and occasionally gets you into trouble."
  },
  {
    "objectID": "4511/notes/01/python.html#truth",
    "href": "4511/notes/01/python.html#truth",
    "title": "Python Notes",
    "section": "Truth",
    "text": "Truth\nPython has “truth values” for most built-in types. 0, empty values, and None (null) evaluate as false, non-zero and non-empty values evaluate as true, even though they aren’t equal to the boolean.\n\nx = []\nif not x:\n    print(x == False)\n    x.append(1)\nprint(x)\n\nFalse\n[1]"
  },
  {
    "objectID": "4511/notes/01/python.html#functions",
    "href": "4511/notes/01/python.html#functions",
    "title": "Python Notes",
    "section": "Functions",
    "text": "Functions\nFunctions are defined with def and a colon. Indentation to group statements follows the same conventions you have already seen.\n\ndef doubling(x):\n    return x*2\n\ny = doubling(2)\nprint(y)\n\n4\n\n\nFunctions do not have to return anything.\n\ndef good_morning():\n    print(\"sunrise\")\n\ngood_morning()\n\nsunrise\n\n\nVariables passed to a function are copied into the function and not modified outside of the scope of the function.\n\ndef add_one(x):\n    x += 1\n    return x\n\ny = 2\nz = add_one(y)\nprint(y)\n\n2\n\n\nLists passed to a function are passed as references, and are modified outside of the scope of the function.\n\ndef append_sunrise(x):\n    x.append(\"sunrise\")\n    return x\n\ny = ['sunset']\nz = append_sunrise(y)\nprint(y)\n\n['sunset', 'sunrise']\n\n\nThis is a decent time to note that you can get into some trouble with functions because nothing in Python is explicitly typed:\ndef append_sunrise(x):\n    x.append(\"sunrise\")\n    return x\n\ny = 'sunset'\nz = append_sunrise(y)\nprint(y)"
  },
  {
    "objectID": "4511/notes/01/python.html#modules-and-imports",
    "href": "4511/notes/01/python.html#modules-and-imports",
    "title": "Python Notes",
    "section": "Modules and Imports",
    "text": "Modules and Imports\n\nVirtual Environments\nYou probably know this:\n\nimport numpy\n\nprint(numpy.random.random())\n\n0.9401252188712262\n\n\nand this3\n3 It might not run if you don’t have scipy installed, so install scipy.\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\n\na = stats.uniform(1, 5)\nprint(a)\nprint(a.cdf(2), a.cdf(3), a.cdf(5))\n\n&lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7c5268b32840&gt;\n0.2 0.4 0.8\n\n\nWhere do imports come from? The environment. There’s a default environment; but for any complicated project, you’ll want to create your own. You can call it whatever you want. .venv works. You could call it otis. You should call it something meaningful.\nAt the command line:4\n4 Your install might use python3 instead of pythonpython -m venv otis\ncd otis; tree | head -n 172\n.\n├── bin\n│   ├── activate\n│   ├── activate.csh\n│   ├── activate.fish\n│   ├── Activate.ps1\n│   ├── pip\n│   ├── pip3\n│   ├── pip3.11\n│   ├── python -&gt; /home/adsr/miniconda3/bin/python\n│   ├── python3 -&gt; python\n│   └── python3.11 -&gt; python\n├── include\n│   └── python3.11\n├── lib\n│   └── python3.11\n│       └── site-packages\nMake a new environment for every project! Or don’t, and find out what happens:\n\nThere are several package managers for python, poetry and conda are the most popular5 as of 2024. You can use pip, it’s fine.\n5 My own assertion, no data to back this up, probably true.\n\nModules\nWhen you make a .py file with any definitions, it’s called a module, and the module name is the file name (before the .py extension).\nConsider this module:\n\n\nutils.py\n\nfrom copy import deepcopy\n\ndef stringify(L: list[int]) -&gt; list:\n    L = deepcopy(L)\n    L.sort()\n    return str(L)\n\nWe can import it from any script in the same folder:\n\nimport utils\nA = utils.stringify([3, 2, 2, 1])\nprint(A, type(A))\n\n[1, 2, 2, 3] &lt;class 'str'&gt;\n\n\nWe can also import component definitions:\n\nfrom utils import stringify\nA = stringify([\"otis\", \"carl\", \"bruce\"])\nprint(A, type(A))\n\n['bruce', 'carl', 'otis'] &lt;class 'str'&gt;\n\n\nPython doesn’t enforce type hints 🙃"
  },
  {
    "objectID": "4511/notes/01/python.html#classes",
    "href": "4511/notes/01/python.html#classes",
    "title": "Python Notes",
    "section": "Classes",
    "text": "Classes\nPython has excellent support for objects (classes), even though they aren’t necessary for basic scripts.\n\nclass Node:\n    def __init__(self, state, parent=None):\n        self.state = state\n        self.parent = parent\n\n    def __str__(self): # this determines the string representation of the node\n        return str(self.state)\n\nThe __init__ function is the constructor. We’ll try to unpack what happens below:\n\na = Node([2, 3])\nprint(a, a.parent)\n\nb = Node([2, 4], a)\na = 3\nprint(b.parent)\n\n[2, 3] None\n[2, 3]\n\n\n\nThe constructor is defined as __init__ but is called with the class name\nWe overrode __str__ so that printing a Node prints its state variable\nWe reassigned a to an integer, 3\nb still has a valid .parent reference!\n\n\nc = b.parent\nc.state = [2, 5]\nprint(b.parent)\n\n[2, 5]"
  },
  {
    "objectID": "4511/notes/01/python.html#references",
    "href": "4511/notes/01/python.html#references",
    "title": "Python Notes",
    "section": "References?",
    "text": "References?\nSurely you are aware that Python doesn’t have pointers.\n…Python doesn’t have pointers in the sense that it does not have pointers that directly reference locations in memory. Python does have references, which point to objects in namespaces, and they are simultaneously extremely useful and extremely confusing. 🙃\n\nPrimitive/immutable types are assigned ‘directly’\nObjects are assigned as references\n\nTo illustrate:\nInts are immutable (so are floats and strings) \\(\\rightarrow\\) assignment is to the value\n\nx = 2\ny = x\nx = 3\nprint(y)\n\n2\n\n\nLists are objects \\(\\rightarrow\\) assignment is a reference\n\nA = [1, 2, 3]\nB = A\nA.append(4)\nprint(B)\n\n[1, 2, 3, 4]\n\n\nTuples are immutable \\(\\rightarrow\\) assignment is to the value\n\nA = 1, 2, 3\nB = A\nA = 4, 5, 6\nprint(B)\n\n(1, 2, 3)\n\n\nDicts are objects \\(\\rightarrow\\) assignment is a reference\n\nA = {\"carl\": 5, \"otis\": 6}\nB = A\nB[\"bruce\"] = 4\nprint(A)\n\n{'carl': 5, 'otis': 6, 'bruce': 4}\n\n\nStrings are immutable \\(\\rightarrow\\) assignment is to the value\n\nIf you want to just access the values of a list or dict, but not the object as a reference, use copy.deepcopy\n\n\nA = \"otis\"\nB = A\nA = \"carl\"\nprint(B)\n\notis"
  },
  {
    "objectID": "4511/notes/01/python.html#hashing",
    "href": "4511/notes/01/python.html#hashing",
    "title": "Python Notes",
    "section": "Hashing",
    "text": "Hashing\nAnything that’s immutable can be hashed (can be the key of a dict):\n\nD = {}\nD[\"first\"] = 3\nD[(2, 3)] = 4\nD[1] = 1\nprint(D)\n\n{'first': 3, (2, 3): 4, 1: 1}"
  },
  {
    "objectID": "4511/notes/01/python.html#functions-as-references",
    "href": "4511/notes/01/python.html#functions-as-references",
    "title": "Python Notes",
    "section": "Functions as References",
    "text": "Functions as References\nFunctions are objects, too.\nRecall:\n\n\nutils.py\n\nfrom copy import deepcopy\n\ndef stringify(L: list[int]) -&gt; list:\n    L = deepcopy(L)\n    L.sort()\n    return str(L)\n\n\nfrom utils import stringify\nprint(stringify)\nx = stringify # what.\nx([1, 4, 5])\n\n&lt;function stringify at 0x7c52a71539c0&gt;\n\n\n'[1, 4, 5]'\n\n\nWe can pass them as arguments:\n\ndef f(x, y):\n    return x(y) + \"!!\"\n\na = f(stringify, [\"sun\", \"set\"])\nprint(a)\n\n['set', 'sun']!!"
  },
  {
    "objectID": "4511/notes/01/python.html#comprehensions",
    "href": "4511/notes/01/python.html#comprehensions",
    "title": "Python Notes",
    "section": "Comprehensions",
    "text": "Comprehensions\nThey start out kind of cute\n\nx = [i**2 % 24 for i in range(2, 15)]\nprint(x)\n\n[4, 9, 16, 1, 12, 1, 16, 9, 4, 1, 0, 1, 4]\n\n\n\nx = [i**2 % 24 for i in range(2, 15) if i % 3 == 1]\nprint(x)\n\n[16, 1, 4, 1]\n\n\nThey rapidly become kind of cursed and unreadable:\n\ny = [j+i if i % 2 == 1 else \"otis\" for j, i in enumerate(x)]\nprint(y)\n\n['otis', 2, 'otis', 4]\n\n\nDict comprehensions exist:\n\nz = {i:j for i, j in enumerate(x)}\nprint(z)\n\n{0: 16, 1: 1, 2: 4, 3: 1}\n\n\nDon’t 🏌️\n\n[print(i+j, end=\" \") for i, j in enumerate([x+int(x**1.5) for x in range(2, 19)])]\nprint(\":)\")\n\n4 9 14 19 24 30 36 43 49 56 63 70 78 86 94 102 110 :)"
  },
  {
    "objectID": "4511/notes/03/03.html#announcements",
    "href": "4511/notes/03/03.html#announcements",
    "title": "Local Search & Games",
    "section": "Announcements",
    "text": "Announcements\n\n\nHomework 1 is due on 7 February at 11:55 PM\n\nLate submission policy\n\nHomework 2 is due on 21 February at 11:55 PM"
  },
  {
    "objectID": "4511/notes/03/03.html#why-are-we-here",
    "href": "4511/notes/03/03.html#why-are-we-here",
    "title": "Local Search & Games",
    "section": "Why Are We Here?",
    "text": "Why Are We Here?"
  },
  {
    "objectID": "4511/notes/03/03.html#why-are-we-here-1",
    "href": "4511/notes/03/03.html#why-are-we-here-1",
    "title": "Local Search & Games",
    "section": "Why Are We Here?",
    "text": "Why Are We Here?\n\n⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣶⣶⣶⣶⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀\n⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀\n⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀\n⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀\n⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋            ⠀⣀⣄⡀      ⠀⠀⣠⣄⡀\n⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀            ⢸⣿⣿⣿      ⠀⢸⣿⣿⣿\n⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠀            ⠉⠋⠁      ⠀⠀⠙⠋⠁\n⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀\n⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⠀⠀⠀⠀\n⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀\n⠀⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠛⠿⠿⠿⠿⠛⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀"
  },
  {
    "objectID": "4511/notes/03/03.html#search-why",
    "href": "4511/notes/03/03.html#search-why",
    "title": "Local Search & Games",
    "section": "Search: Why?",
    "text": "Search: Why?\n\nFully-observed problem\nDeterministic actions and state\nWell-defined start and goal\n\n“Well-defined”"
  },
  {
    "objectID": "4511/notes/03/03.html#goal-tests",
    "href": "4511/notes/03/03.html#goal-tests",
    "title": "Local Search & Games",
    "section": "Goal Tests",
    "text": "Goal Tests"
  },
  {
    "objectID": "4511/notes/03/03.html#goal-tests-1",
    "href": "4511/notes/03/03.html#goal-tests-1",
    "title": "Local Search & Games",
    "section": "Goal Tests",
    "text": "Goal Tests"
  },
  {
    "objectID": "4511/notes/03/03.html#best-first-search",
    "href": "4511/notes/03/03.html#best-first-search",
    "title": "Local Search & Games",
    "section": "Best-First Search",
    "text": "Best-First Search"
  },
  {
    "objectID": "4511/notes/03/03.html#a-search",
    "href": "4511/notes/03/03.html#a-search",
    "title": "Local Search & Games",
    "section": "A* Search",
    "text": "A* Search\n\nInclude path-cost \\(g(n)\\)\n\n\\(f(n) = g(n) + h(n)\\)\n\n\n\n\n\n\nComplete (always)\nOptimal (sometimes)\n\nPainful \\(O(b^m)\\) time and space complexity"
  },
  {
    "objectID": "4511/notes/03/03.html#a-vs.-dijkstra",
    "href": "4511/notes/03/03.html#a-vs.-dijkstra",
    "title": "Local Search & Games",
    "section": "A* vs. Dijkstra",
    "text": "A* vs. Dijkstra\n(example)\n \n\nAdvantages?\nDisadvantages?"
  },
  {
    "objectID": "4511/notes/03/03.html#choosing-heuristics",
    "href": "4511/notes/03/03.html#choosing-heuristics",
    "title": "Local Search & Games",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nRecall: \\(h(n)\\) estimates cost from \\(n\\) to goal\n\n\n\n\n\nAdmissibility\nConsistency"
  },
  {
    "objectID": "4511/notes/03/03.html#choosing-heuristics-1",
    "href": "4511/notes/03/03.html#choosing-heuristics-1",
    "title": "Local Search & Games",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nAdmissibility\n\nNever overestimates cost from \\(n\\) to goal\nCost-optimal!\n\nConsistency\n\n\\(h(n) \\leq c(n, a, n') + h(n')\\)\n\\(n'\\) successors of \\(n\\)\n\\(c(n, a, n')\\) cost from \\(n\\) to \\(n'\\) given action \\(a\\)"
  },
  {
    "objectID": "4511/notes/03/03.html#consistency",
    "href": "4511/notes/03/03.html#consistency",
    "title": "Local Search & Games",
    "section": "Consistency",
    "text": "Consistency\n\nConsistent heuristics are admissible\n\nInverse not necessarily true\n\nAlways reach each state on optimal path\nImplications for inconsistent heuristic?"
  },
  {
    "objectID": "4511/notes/03/03.html#is-optimality-desirable",
    "href": "4511/notes/03/03.html#is-optimality-desirable",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?"
  },
  {
    "objectID": "4511/notes/03/03.html#is-optimality-desirable-1",
    "href": "4511/notes/03/03.html#is-optimality-desirable-1",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes"
  },
  {
    "objectID": "4511/notes/03/03.html#is-optimality-desirable-2",
    "href": "4511/notes/03/03.html#is-optimality-desirable-2",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes, but it isn’t always feasible\n\nA* search still exponentially complex in solution length\nOptimality is never guaranteed “inexpensively”\n\nWe need strategies for “good enough” solutions"
  },
  {
    "objectID": "4511/notes/03/03.html#satisficing",
    "href": "4511/notes/03/03.html#satisficing",
    "title": "Local Search & Games",
    "section": "Satisficing",
    "text": "Satisficing\n\nsatisfy - verb - To give satisfaction; to afford gratification; to leave nothing to be desired.1\n\n\nsuffice - verb - To be enough, or sufficient; to meet the need (of anything)2\n\nWebster’s, 1913Webster’s, 1913"
  },
  {
    "objectID": "4511/notes/03/03.html#weighted-a-search",
    "href": "4511/notes/03/03.html#weighted-a-search",
    "title": "Local Search & Games",
    "section": "Weighted A* Search",
    "text": "Weighted A* Search\n\nGreedy: \\(f(n) = h(n)\\)\nA*: \\(f(n) = h(n) + g(n)\\)\nUniform-Cost Search: \\(f(n) = g(n)\\)\n\n…\n\nWeighted A* Search: \\(f(n) = W\\cdot h(n) + g(n)\\)\n\nWeight \\(W &gt; 1\\)"
  },
  {
    "objectID": "4511/notes/03/03.html#reducing-complexity",
    "href": "4511/notes/03/03.html#reducing-complexity",
    "title": "Local Search & Games",
    "section": "Reducing Complexity",
    "text": "Reducing Complexity\n\nFrontier Management\nElimination of \\(reached\\) collection\n\nReference counts\nHow else?\n\n\n\n\n\nOther searches"
  },
  {
    "objectID": "4511/notes/03/03.html#iterative-deepening-a-search",
    "href": "4511/notes/03/03.html#iterative-deepening-a-search",
    "title": "Local Search & Games",
    "section": "Iterative-Deepening A* Search",
    "text": "Iterative-Deepening A* Search\n\n“IDA*” Search\n\nSimilar to Iterative Deepening with Depth-First Search\n\nDFS uses depth cutoff\nIDA* uses \\(h(n) + g(n)\\) cutoff with DFS\nOnce cutoff breached, new cutoff:\n\nTypically next-largest \\(h(n) + g(n)\\)\n\n\\(O(b^m)\\) time complexity 😔\n\\(O(d)\\) space complexity1 😌\n\n\n\nThis is slightly complicated based on heuristic branching factor \\(b_h\\)."
  },
  {
    "objectID": "4511/notes/03/03.html#beam-search",
    "href": "4511/notes/03/03.html#beam-search",
    "title": "Local Search & Games",
    "section": "Beam Search",
    "text": "Beam Search\n\nBest-First Search:\n\nFrontier is all expanded nodes\n\nBeam Search:\n\n\\(k\\) “best” nodes are kept on frontier\n\nOthers discarded\n\nAlt: all nodes within \\(\\delta\\) of best node\nNot Optimal\nNot Complete"
  },
  {
    "objectID": "4511/notes/03/03.html#recursive-best-first-search-rbfs",
    "href": "4511/notes/03/03.html#recursive-best-first-search-rbfs",
    "title": "Local Search & Games",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)\n\nNo \\(reached\\) table is kept\nSecond-best node \\(f(n)\\) retained\n\nSearch from each node cannot exceed this limit\nIf exceeded, recursion “backs up” to previous node\n\nMemory-efficient\n\nCan “cycle” between branches"
  },
  {
    "objectID": "4511/notes/03/03.html#recursive-best-first-search-rbfs-1",
    "href": "4511/notes/03/03.html#recursive-best-first-search-rbfs-1",
    "title": "Local Search & Games",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)"
  },
  {
    "objectID": "4511/notes/03/03.html#heuristic-characteristics",
    "href": "4511/notes/03/03.html#heuristic-characteristics",
    "title": "Local Search & Games",
    "section": "Heuristic Characteristics",
    "text": "Heuristic Characteristics\n\nWhat makes a “good” heuristic?\n\nWe know about admissability and consistency\nWhat about performance?\n\nEffective branching factor\nEffective depth\n# of nodes expanded"
  },
  {
    "objectID": "4511/notes/03/03.html#where-do-heuristics-come-from",
    "href": "4511/notes/03/03.html#where-do-heuristics-come-from",
    "title": "Local Search & Games",
    "section": "Where Do Heuristics Come From?",
    "text": "Where Do Heuristics Come From?\n\nIntuition\n\n“Just Be Really Smart”\n\nRelaxation\n\nThe problem is constrained\nRemove the constraint\n\nPre-computation\n\nSub problems\n\nLearning"
  },
  {
    "objectID": "4511/notes/03/03.html#what-even-is-the-goal",
    "href": "4511/notes/03/03.html#what-even-is-the-goal",
    "title": "Local Search & Games",
    "section": "What Even Is The Goal?",
    "text": "What Even Is The Goal?\nUninformed/Informed Search:\n\nKnown start, known goal\nSearch for optimal path\n\nLocal Search:\n\n“Start” is irrelevant\nGoal is not known\n\nBut we know it when we see it\n\nSearch for goal"
  },
  {
    "objectID": "4511/notes/03/03.html#brutal-example",
    "href": "4511/notes/03/03.html#brutal-example",
    "title": "Local Search & Games",
    "section": "Brutal Example",
    "text": "Brutal Example"
  },
  {
    "objectID": "4511/notes/03/03.html#less-brutal-example",
    "href": "4511/notes/03/03.html#less-brutal-example",
    "title": "Local Search & Games",
    "section": "Less-Brutal Example",
    "text": "Less-Brutal Example"
  },
  {
    "objectID": "4511/notes/03/03.html#real-world-examples",
    "href": "4511/notes/03/03.html#real-world-examples",
    "title": "Local Search & Games",
    "section": "“Real-World” Examples",
    "text": "“Real-World” Examples\n\nScheduling\nLayout optimization\n\nFactories\nCircuits\n\nPortfolio management\nOthers?"
  },
  {
    "objectID": "4511/notes/03/03.html#objective-function",
    "href": "4511/notes/03/03.html#objective-function",
    "title": "Local Search & Games",
    "section": "Objective Function",
    "text": "Objective Function\n\nDo you know what you want?1\nCan you express it mathematically?2\n\nA single value\nMore is better\n\nObjective function: a function of state\n\nIf not, you might be humanIf not, you might be human"
  },
  {
    "objectID": "4511/notes/03/03.html#hill-climbing",
    "href": "4511/notes/03/03.html#hill-climbing",
    "title": "Local Search & Games",
    "section": "Hill-Climbing",
    "text": "Hill-Climbing\n\nObjective function\nState space mapping\n\nNeighbors"
  },
  {
    "objectID": "4511/notes/03/03.html#hill-climbing-1",
    "href": "4511/notes/03/03.html#hill-climbing-1",
    "title": "Local Search & Games",
    "section": "Hill-Climbing",
    "text": "Hill-Climbing"
  },
  {
    "objectID": "4511/notes/03/03.html#the-hazards-of-climbing-hills",
    "href": "4511/notes/03/03.html#the-hazards-of-climbing-hills",
    "title": "Local Search & Games",
    "section": "The Hazards of Climbing Hills",
    "text": "The Hazards of Climbing Hills\n\nLocal maxima\nPlateaus\nRidges"
  },
  {
    "objectID": "4511/notes/03/03.html#five-queens",
    "href": "4511/notes/03/03.html#five-queens",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03.html#five-queens-1",
    "href": "4511/notes/03/03.html#five-queens-1",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03.html#five-queens-2",
    "href": "4511/notes/03/03.html#five-queens-2",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03.html#variations",
    "href": "4511/notes/03/03.html#variations",
    "title": "Local Search & Games",
    "section": "Variations",
    "text": "Variations\n\nSideways moves\n\nNot free\n\nStochastic moves\n\nFull set\nFirst choice\n\nRandom restarts\n\nIf at first you don’t succeed, you fail try again!\nComplete 😌"
  },
  {
    "objectID": "4511/notes/03/03.html#the-trouble-with-local-maxima",
    "href": "4511/notes/03/03.html#the-trouble-with-local-maxima",
    "title": "Local Search & Games",
    "section": "The Trouble with Local Maxima",
    "text": "The Trouble with Local Maxima\n\nWe don’t know that they’re local maxima\n\nUnless we do?\n\nHill climbing is efficient\n\nBut gets trapped\n\nExhaustive search is complete\n\nBut it’s exhaustive!\nStochastic methods are ‘exhaustive’"
  },
  {
    "objectID": "4511/notes/03/03.html#simulated-annealing",
    "href": "4511/notes/03/03.html#simulated-annealing",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing"
  },
  {
    "objectID": "4511/notes/03/03.html#simulated-annealing-1",
    "href": "4511/notes/03/03.html#simulated-annealing-1",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing\n\nDoesn’t actually have anything to do with metallurgy\nSearch begins with high “temperature”\n\nTemperature decreases during search\n\nNext state selected randomly\n\nImprovements always accepted\nNon-improvements rejected stochastically\nHigher temperature, less rejection\n“Worse” result, more rejection"
  },
  {
    "objectID": "4511/notes/03/03.html#simulated-annealing-2",
    "href": "4511/notes/03/03.html#simulated-annealing-2",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing"
  },
  {
    "objectID": "4511/notes/03/03.html#local-beam-search",
    "href": "4511/notes/03/03.html#local-beam-search",
    "title": "Local Search & Games",
    "section": "Local Beam Search",
    "text": "Local Beam Search\nRecall:\n\nBeam search keeps track of \\(k\\) “best” branches\n\nLocal Beam Search:\n\nHill climbing search, keeping track of \\(k\\) successors\n\nDeterministic\nStochastic"
  },
  {
    "objectID": "4511/notes/03/03.html#local-beam-search-1",
    "href": "4511/notes/03/03.html#local-beam-search-1",
    "title": "Local Search & Games",
    "section": "Local Beam Search",
    "text": "Local Beam Search"
  },
  {
    "objectID": "4511/notes/03/03.html#the-real-world-is-discrete",
    "href": "4511/notes/03/03.html#the-real-world-is-discrete",
    "title": "Local Search & Games",
    "section": "The Real World Is Discrete",
    "text": "The Real World Is Discrete\n\n\n\n(it isn’t)"
  },
  {
    "objectID": "4511/notes/03/03.html#the-real-world-is-not-discrete",
    "href": "4511/notes/03/03.html#the-real-world-is-not-discrete",
    "title": "Local Search & Games",
    "section": "The Real World Is Not Discrete",
    "text": "The Real World Is Not Discrete\n\nDiscretize continuous space\n\nWorks iff no objective function discontinuities\nWhat happens if there are discontinuities?\nHow do we know that there are discontinuities?"
  },
  {
    "objectID": "4511/notes/03/03.html#gradient-descent",
    "href": "4511/notes/03/03.html#gradient-descent",
    "title": "Local Search & Games",
    "section": "Gradient Descent",
    "text": "Gradient Descent\n\nMinimize loss instead of climb hill\n\nStill the same idea\n\n\nConsider:\n\nOne state variable, \\(x\\)\nObjective function \\(f(x)\\)\n\nHow do we minimize \\(f(x)\\) ?\nIs there a closed form \\(\\frac{d}{dx}\\) ?"
  },
  {
    "objectID": "4511/notes/03/03.html#gradient-descent-1",
    "href": "4511/notes/03/03.html#gradient-descent-1",
    "title": "Local Search & Games",
    "section": "Gradient Descent",
    "text": "Gradient Descent\nMultivariate \\(\\vec{x} = x_0, x_1, ...\\)\n\n\nInstead of derivative, gradient:\n\\(\\nabla f(\\vec{x}) = \\left[ \\frac{\\partial f}{\\partial x_0}, \\frac{\\partial f}{\\partial x_1}, ...\\right]\\)\n\n\n“Locally” descend gradient:\n\\(\\vec{x} \\gets \\vec{x} + \\alpha \\nabla f(\\vec{x})\\)"
  },
  {
    "objectID": "4511/notes/03/03.html#probability-1",
    "href": "4511/notes/03/03.html#probability-1",
    "title": "Local Search & Games",
    "section": "Probability",
    "text": "Probability"
  },
  {
    "objectID": "4511/notes/03/03.html#random-events",
    "href": "4511/notes/03/03.html#random-events",
    "title": "Local Search & Games",
    "section": "Random Events",
    "text": "Random Events\n\nAlways in the future\nWe know something about them\n\nWe don’t know the outcome with certainty\n\nDistinctions\nProbabilities"
  },
  {
    "objectID": "4511/notes/03/03.html#first-we-will-play-a-game",
    "href": "4511/notes/03/03.html#first-we-will-play-a-game",
    "title": "Local Search & Games",
    "section": "First, We Will Play A Game",
    "text": "First, We Will Play A Game\n\nPick a partner\nPlace 11 pieces of candy between you\nAlternating turns, either:\n\nTake one piece\nTake two pieces\n\nLast person to take a piece wins all of the candy"
  },
  {
    "objectID": "4511/notes/03/03.html#adversity",
    "href": "4511/notes/03/03.html#adversity",
    "title": "Local Search & Games",
    "section": "Adversity",
    "text": "Adversity\nSo far:\n\nThe world does not care about us\nThis is a simplifying assumption!\n\nReality:\n\nThe world does not care us\n\n\n\n…but it wants things for “itself”\n\n\n\n\n…and we don’t want the same things"
  },
  {
    "objectID": "4511/notes/03/03.html#the-adversary",
    "href": "4511/notes/03/03.html#the-adversary",
    "title": "Local Search & Games",
    "section": "The Adversary",
    "text": "The Adversary\nOne extreme:\n\nSingle adversary\n\nAdversary wants the exact opposite from us\nIf adversary “wins,” we lose\n\n\n\n😐\n\n\nOther extreme:\n\nAn entire world of agents with different values\n\nThey might want some things similar to us\n\n“Economics”\n\n\n\n😐"
  },
  {
    "objectID": "4511/notes/03/03.html#simple-games",
    "href": "4511/notes/03/03.html#simple-games",
    "title": "Local Search & Games",
    "section": "Simple Games",
    "text": "Simple Games\n\nTwo-player\nTurn-taking\nDiscrete-state\nFully-observable\nZero-sum\n\nThis does some work for us!"
  },
  {
    "objectID": "4511/notes/03/03.html#max-and-min",
    "href": "4511/notes/03/03.html#max-and-min",
    "title": "Local Search & Games",
    "section": "Max and Min",
    "text": "Max and Min\n\nTwo players want the opposite of each other\nState takes into account both agents\n\nActions depend on whose turn it is"
  },
  {
    "objectID": "4511/notes/03/03.html#minimax",
    "href": "4511/notes/03/03.html#minimax",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax\n\nInitial state \\(s_0\\)\nActions(\\(s\\)) and To-move(\\(s\\))\nResult(\\(s, a\\))\nIs-Terminal(\\(s\\))\nUtility(\\(s, p\\))"
  },
  {
    "objectID": "4511/notes/03/03.html#minimax-1",
    "href": "4511/notes/03/03.html#minimax-1",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax"
  },
  {
    "objectID": "4511/notes/03/03.html#minimax-2",
    "href": "4511/notes/03/03.html#minimax-2",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax"
  },
  {
    "objectID": "4511/notes/03/03.html#more-than-two-players",
    "href": "4511/notes/03/03.html#more-than-two-players",
    "title": "Local Search & Games",
    "section": "More Than Two Players",
    "text": "More Than Two Players\n\nTwo players, two values: \\(v_A, v_B\\)\n\nZero-sum: \\(v_A = -v_B\\)\nOnly one value needs to be explicitly represented\n\n\\(&gt; 2\\) players:\n\n\\(v_A, v_B, v_C ...\\)\nValue scalar becomes \\(\\vec{v}\\)"
  },
  {
    "objectID": "4511/notes/03/03.html#society",
    "href": "4511/notes/03/03.html#society",
    "title": "Local Search & Games",
    "section": "Society",
    "text": "Society\n\n\\(&gt;2\\) players, only one can win\nCooperation can be rational!\n\nExample:\n\nA & B: 30% win probability each\nC: 40% win probability\nA & B cooperate to eliminate C\n\n\\(\\rightarrow\\) A & B: 50% win probability each\n\n\n\n\n…what about friendship?"
  },
  {
    "objectID": "4511/notes/03/03.html#minimax-efficiency",
    "href": "4511/notes/03/03.html#minimax-efficiency",
    "title": "Local Search & Games",
    "section": "Minimax Efficiency",
    "text": "Minimax Efficiency\nPruning removes the need to explore the full tree.\n\nMax and Min nodes alternate\nOnce one value has been found, we can eliminate parts of search\n\nLower values, for Max\nHigher values, for Min\n\nRemember highest value (\\(\\alpha\\)) for Max\nRemember lowest value (\\(\\beta\\)) for Min"
  },
  {
    "objectID": "4511/notes/03/03.html#pruning",
    "href": "4511/notes/03/03.html#pruning",
    "title": "Local Search & Games",
    "section": "Pruning",
    "text": "Pruning"
  },
  {
    "objectID": "4511/notes/03/03.html#heuristics",
    "href": "4511/notes/03/03.html#heuristics",
    "title": "Local Search & Games",
    "section": "Heuristics 😌",
    "text": "Heuristics 😌\n\nIn practice, trees are far too deep to completely search\nHeuristic: replace utility with evaluation function\n\nBetter than losing, worse than winning\nRepresents chance of winning\n\nChance? 🎲🎲\n\nEven in deterministic games\nWhy?"
  },
  {
    "objectID": "4511/notes/03/03.html#more-pruning",
    "href": "4511/notes/03/03.html#more-pruning",
    "title": "Local Search & Games",
    "section": "More Pruning",
    "text": "More Pruning\n\nDon’t bother further searching bad moves\n\nExamples?\n\nBeam search\n\nLee Sedol’s singular win against AlphaGo"
  },
  {
    "objectID": "4511/notes/03/03.html#other-techniques",
    "href": "4511/notes/03/03.html#other-techniques",
    "title": "Local Search & Games",
    "section": "Other Techniques",
    "text": "Other Techniques\n\nMove ordering\n\nHow do we decide?\n\nLookup tables\n\nFor subsets of games"
  },
  {
    "objectID": "4511/notes/03/03.html#monte-carlo-tree-search",
    "href": "4511/notes/03/03.html#monte-carlo-tree-search",
    "title": "Local Search & Games",
    "section": "Monte Carlo Tree Search",
    "text": "Monte Carlo Tree Search\n\nMany games are too large even for an efficient \\(\\alpha\\)-\\(\\beta\\) search 😔\n\nWe can still play them\n\nSimulate plays of entire games from starting state\n\nUpdate win probability from each node (for each player) based on result\n\n“Explore/exploit” paradigm for move selection"
  },
  {
    "objectID": "4511/notes/03/03.html#choosing-moves",
    "href": "4511/notes/03/03.html#choosing-moves",
    "title": "Local Search & Games",
    "section": "Choosing Moves",
    "text": "Choosing Moves\n\nWe want our search to pick good moves\nWe want our search to pick unknown moves\nWe don’t want our search to pick bad moves\n\n(Assuming they’re actually bad moves)\n\n\nSelect moves based on a heuristic."
  },
  {
    "objectID": "4511/notes/03/03.html#games-of-luck",
    "href": "4511/notes/03/03.html#games-of-luck",
    "title": "Local Search & Games",
    "section": "Games of Luck",
    "text": "Games of Luck\n\nReal-world problems are rarely deterministic\nNon-deterministic state evolution:\n\nRoll a die to determine next position\nToss a coin to determine who picks candy first\nPrecise trajectory of kicked football1\nOthers?\n\n\nAny definition of “football”"
  },
  {
    "objectID": "4511/notes/03/03.html#solving-non-deterministic-games",
    "href": "4511/notes/03/03.html#solving-non-deterministic-games",
    "title": "Local Search & Games",
    "section": "Solving Non-Deterministic Games",
    "text": "Solving Non-Deterministic Games\nPreviously: Max and Min alternate turns\nNow:\n\nMax\nChance\nMin\nChance\n\n 😣"
  },
  {
    "objectID": "4511/notes/03/03.html#expectiminimax",
    "href": "4511/notes/03/03.html#expectiminimax",
    "title": "Local Search & Games",
    "section": "Expectiminimax",
    "text": "Expectiminimax\n\n“Expected value” of next position\n\n\n\n\n\nHow does this impact branching factor of the search?\n\n🫠"
  },
  {
    "objectID": "4511/notes/03/03.html#filled-with-uncertainty",
    "href": "4511/notes/03/03.html#filled-with-uncertainty",
    "title": "Local Search & Games",
    "section": "Filled With Uncertainty",
    "text": "Filled With Uncertainty\nWhat is to be done?\n\nPruning is still possible\n\nHow?\n\nHeuristic evaluation functions\n\nChoose carefully!"
  },
  {
    "objectID": "4511/notes/03/03.html#non-optimal-adversaries",
    "href": "4511/notes/03/03.html#non-optimal-adversaries",
    "title": "Local Search & Games",
    "section": "Non-Optimal Adversaries",
    "text": "Non-Optimal Adversaries\n\nIs deterministic “best” behavior optimal?\nAre all adversaries rational?\n\n\n\n\nExpectimax"
  },
  {
    "objectID": "4511/notes/03/03.html#references",
    "href": "4511/notes/03/03.html#references",
    "title": "Local Search & Games",
    "section": "References",
    "text": "References\n\nStuart J. Russell and Peter Norvig. Artificial Intelligence: A Modern Approach. 4th Edition, 2020.\nMykal Kochenderfer, Tim Wheeler, and Kyle Wray. Algorithms for Decision Making. 1st Edition, 2022.\nStanford CS231\nStanford CS228\nUC Berkeley CS188"
  },
  {
    "objectID": "4511/notes/02/02.html#good-afternoon",
    "href": "4511/notes/02/02.html#good-afternoon",
    "title": "Search",
    "section": "Good Afternoon",
    "text": "Good Afternoon\n\nGood afternoon"
  },
  {
    "objectID": "4511/notes/02/02.html#announcements",
    "href": "4511/notes/02/02.html#announcements",
    "title": "Search",
    "section": "Announcements",
    "text": "Announcements\n\nHomework 1 is due on 7 February at 11:55 PM\n\nAutomatic extensions\nPay attention!"
  },
  {
    "objectID": "4511/notes/02/02.html#why-are-we-here",
    "href": "4511/notes/02/02.html#why-are-we-here",
    "title": "Search",
    "section": "Why Are We Here?",
    "text": "Why Are We Here?\n\nWe’re designing rational agents!\n\nPerception\nLogic\nAction"
  },
  {
    "objectID": "4511/notes/02/02.html#in-practice",
    "href": "4511/notes/02/02.html#in-practice",
    "title": "Search",
    "section": "In Practice",
    "text": "In Practice\n\nEnvironment\n\nWhat happens next\n\nPerception\n\nWhat agent can see\n\nAction\n\nWhat agent can do\n\nMeasure/Reward\n\nEncoded utility function"
  },
  {
    "objectID": "4511/notes/02/02.html#reframed",
    "href": "4511/notes/02/02.html#reframed",
    "title": "Search",
    "section": "Reframed",
    "text": "Reframed\n\nBuilding a model of the real world\n\nModel is based on sensor inputs\nModel is flawed\n\nSolve problems on the model\n\nTake actions based on solution\n\nModel close to reality \\(\\rightarrow\\) solution useful\n\nElse: 🫠"
  },
  {
    "objectID": "4511/notes/02/02.html#search-why",
    "href": "4511/notes/02/02.html#search-why",
    "title": "Search",
    "section": "Search: Why?",
    "text": "Search: Why?\n\nFully-observed problem\nDeterministic actions and state\nWell defined start and goal"
  },
  {
    "objectID": "4511/notes/02/02.html#state",
    "href": "4511/notes/02/02.html#state",
    "title": "Search",
    "section": "State",
    "text": "State\nWhat is the state space?"
  },
  {
    "objectID": "4511/notes/02/02.html#state-1",
    "href": "4511/notes/02/02.html#state-1",
    "title": "Search",
    "section": "State",
    "text": "State"
  },
  {
    "objectID": "4511/notes/02/02.html#other-applications",
    "href": "4511/notes/02/02.html#other-applications",
    "title": "Search",
    "section": "Other Applications",
    "text": "Other Applications\n\nRoute planning\nProtein design\nRobotic navigation\nScheduling\n\nScience\nManufacturing"
  },
  {
    "objectID": "4511/notes/02/02.html#not-included",
    "href": "4511/notes/02/02.html#not-included",
    "title": "Search",
    "section": "Not Included",
    "text": "Not Included\n\nUncertainty\n\nState transitions known\n\nAdversary\n\nNobody wants us to lose\n\nCooperation\nContinuous state"
  },
  {
    "objectID": "4511/notes/02/02.html#who-is-the-pac-man",
    "href": "4511/notes/02/02.html#who-is-the-pac-man",
    "title": "Search",
    "section": "Who Is The Pac-Man?",
    "text": "Who Is The Pac-Man?"
  },
  {
    "objectID": "4511/notes/02/02.html#search-problem",
    "href": "4511/notes/02/02.html#search-problem",
    "title": "Search",
    "section": "Search Problem",
    "text": "Search Problem\n\n\nSearch problem includes:\n\nStart State\nState Space\nState Transitions\nGoal Test\n\n\n\nState Space:\n\n\n\nActions & Successor States:"
  },
  {
    "objectID": "4511/notes/02/02.html#tour-of-croatia",
    "href": "4511/notes/02/02.html#tour-of-croatia",
    "title": "Search",
    "section": "Tour of Croatia",
    "text": "Tour of Croatia"
  },
  {
    "objectID": "4511/notes/02/02.html#tour-of-croatia-1",
    "href": "4511/notes/02/02.html#tour-of-croatia-1",
    "title": "Search",
    "section": "Tour of Croatia",
    "text": "Tour of Croatia"
  },
  {
    "objectID": "4511/notes/02/02.html#state-space-size",
    "href": "4511/notes/02/02.html#state-space-size",
    "title": "Search",
    "section": "State Space Size?",
    "text": "State Space Size?\n\n\nPacman positions, Wall Positions\nFood positions, Food Status?\nGhost positions, Ghost Status?"
  },
  {
    "objectID": "4511/notes/02/02.html#state-space-graph",
    "href": "4511/notes/02/02.html#state-space-graph",
    "title": "Search",
    "section": "State Space Graph",
    "text": "State Space Graph"
  },
  {
    "objectID": "4511/notes/02/02.html#search-trees",
    "href": "4511/notes/02/02.html#search-trees",
    "title": "Search",
    "section": "Search Trees",
    "text": "Search Trees\n\nGraph:\n\n\n\nTree:"
  },
  {
    "objectID": "4511/notes/02/02.html#node-representation",
    "href": "4511/notes/02/02.html#node-representation",
    "title": "Search",
    "section": "Node Representation",
    "text": "Node Representation\n\nGraph:\n\n\n\nTree:"
  },
  {
    "objectID": "4511/notes/02/02.html#lets-talk-about-trees",
    "href": "4511/notes/02/02.html#lets-talk-about-trees",
    "title": "Search",
    "section": "Let’s Talk About Trees",
    "text": "Let’s Talk About Trees\n\nFor any non-trivial problem, they’re big\n\n(Effective) branching factor\nDepth\n\nGraph and tree both too large for memory\n\nSuccessor function (graph)\nExpansion function (tree)"
  },
  {
    "objectID": "4511/notes/02/02.html#how-to-solve-it",
    "href": "4511/notes/02/02.html#how-to-solve-it",
    "title": "Search",
    "section": "How To Solve It",
    "text": "How To Solve It\n\nGiven:\n\nStarting node\nGoal test\nExpansion\n\nDo:\n\nExpand nodes from start\nTest each new node for goal\n\nIf goal, success\n\nExpand new nodes\n\nIf nothing left to expand, failure"
  },
  {
    "objectID": "4511/notes/02/02.html#best-first-search",
    "href": "4511/notes/02/02.html#best-first-search",
    "title": "Search",
    "section": "Best-First Search",
    "text": "Best-First Search"
  },
  {
    "objectID": "4511/notes/02/02.html#frontier-expansion",
    "href": "4511/notes/02/02.html#frontier-expansion",
    "title": "Search",
    "section": "Frontier Expansion",
    "text": "Frontier Expansion"
  },
  {
    "objectID": "4511/notes/02/02.html#frontier-expansion-1",
    "href": "4511/notes/02/02.html#frontier-expansion-1",
    "title": "Search",
    "section": "Frontier Expansion",
    "text": "Frontier Expansion\n\nFrontier: nodes “currently” expanded\n\nIf no frontier node is goal, need to add to frontier\nHow?\n\nCan we have cycles?\n\nHow do we deal with cycles?"
  },
  {
    "objectID": "4511/notes/02/02.html#queues-searches",
    "href": "4511/notes/02/02.html#queues-searches",
    "title": "Search",
    "section": "Queues & Searches",
    "text": "Queues & Searches\n\nPriority Queues\n\nBest-First Search\nUniform-Cost Search1\n\nFIFO Queues\n\nBreadth-First Search\n\nLIFO Queues2\n\nDepth-First Search\n\n\nAlso known as “Dijkstra’s Algorithm,” because it is Dijkstra’s AlgorithmAlso known as “stacks,” because they are stacks."
  },
  {
    "objectID": "4511/notes/02/02.html#search-features",
    "href": "4511/notes/02/02.html#search-features",
    "title": "Search",
    "section": "Search Features",
    "text": "Search Features\n\nCompleteness\n\nIf there is a solution, will we find it?\n\nOptimality\n\nWill we find the best solution?\n\nTime complexity\nMemory complexity"
  },
  {
    "objectID": "4511/notes/02/02.html#breadth-first-search",
    "href": "4511/notes/02/02.html#breadth-first-search",
    "title": "Search",
    "section": "Breadth-First Search",
    "text": "Breadth-First Search\n\nFIFO Queue\nComplete\nOptimal\n\\(O(b^d)\\)\nNice features for equal-weight arcs:\n\nLowest-cost path first\n\\(reached\\) collection can be a set"
  },
  {
    "objectID": "4511/notes/02/02.html#breadth-first-search-1",
    "href": "4511/notes/02/02.html#breadth-first-search-1",
    "title": "Search",
    "section": "Breadth-First Search",
    "text": "Breadth-First Search"
  },
  {
    "objectID": "4511/notes/02/02.html#uniform-cost-search",
    "href": "4511/notes/02/02.html#uniform-cost-search",
    "title": "Search",
    "section": "Uniform-Cost Search",
    "text": "Uniform-Cost Search\nNon-uniform costs \\(\\rightarrow\\) BFS inappropriate."
  },
  {
    "objectID": "4511/notes/02/02.html#depth-first-search",
    "href": "4511/notes/02/02.html#depth-first-search",
    "title": "Search",
    "section": "Depth-First Search",
    "text": "Depth-First Search\n\n“Family” of searches\nLIFO stack\nProblems?"
  },
  {
    "objectID": "4511/notes/02/02.html#uninformed-search-variants",
    "href": "4511/notes/02/02.html#uninformed-search-variants",
    "title": "Search",
    "section": "Uninformed Search Variants",
    "text": "Uninformed Search Variants\n\nDepth-Limited Search\n\nFail if depth limit reached (why?)\n\nIterative deepening\n\nvs. Breadth-First Search\n\nBidirectional Search"
  },
  {
    "objectID": "4511/notes/02/02.html#how-to-choose",
    "href": "4511/notes/02/02.html#how-to-choose",
    "title": "Search",
    "section": "How to Choose?",
    "text": "How to Choose?\n\nThink about when the searches “fail”\nThink about complexity\nDo we need an optimal solution?\n\nAre we looking for “any” solution"
  },
  {
    "objectID": "4511/notes/02/02.html#it-is-possible-to-know-things",
    "href": "4511/notes/02/02.html#it-is-possible-to-know-things",
    "title": "Search",
    "section": "It Is Possible To Know Things",
    "text": "It Is Possible To Know Things\n😌"
  },
  {
    "objectID": "4511/notes/02/02.html#it-is-possible-to-know-things-1",
    "href": "4511/notes/02/02.html#it-is-possible-to-know-things-1",
    "title": "Search",
    "section": "It Is Possible To Know Things",
    "text": "It Is Possible To Know Things"
  },
  {
    "objectID": "4511/notes/02/02.html#mid-atlantic",
    "href": "4511/notes/02/02.html#mid-atlantic",
    "title": "Search",
    "section": "Mid-Atlantic",
    "text": "Mid-Atlantic"
  },
  {
    "objectID": "4511/notes/02/02.html#dc-metro-area",
    "href": "4511/notes/02/02.html#dc-metro-area",
    "title": "Search",
    "section": "DC Metro Area",
    "text": "DC Metro Area"
  },
  {
    "objectID": "4511/notes/02/02.html#heuristics",
    "href": "4511/notes/02/02.html#heuristics",
    "title": "Search",
    "section": "Heuristics",
    "text": "Heuristics\nheuristic - adj - Serving to discover or find out.1\n\nWe know things about the problem\nThese things are external to the graph/tree structure\n\nWe could model the problem differently\nWe can use the information directly\n\n\nWebster’s, 1913"
  },
  {
    "objectID": "4511/notes/02/02.html#best-first-search-reprise",
    "href": "4511/notes/02/02.html#best-first-search-reprise",
    "title": "Search",
    "section": "Best-First Search (reprise)",
    "text": "Best-First Search (reprise)"
  },
  {
    "objectID": "4511/notes/02/02.html#greedy-best-first-search",
    "href": "4511/notes/02/02.html#greedy-best-first-search",
    "title": "Search",
    "section": "Greedy Best-First Search",
    "text": "Greedy Best-First Search\n\nHeuristic \\(h(n)\\)\n\n\\(n\\) is the search-tree node\n\\(h(n)\\) estimates cost from \\(n\\) to goal\n\nBest-first search: \\(f(n)\\) orders priority queue\n\nUse \\(f(n) = h(n)\\)\n\nComplete\nNo optimality guarantee\n\n(expected)"
  },
  {
    "objectID": "4511/notes/02/02.html#a-search",
    "href": "4511/notes/02/02.html#a-search",
    "title": "Search",
    "section": "A* Search",
    "text": "A* Search\n\nInclude path-cost \\(g(n)\\)\n\n\\(f(n) = g(n) + h(n)\\)\n\n\n\n\n\n\nComplete (always)\nOptimal (sometimes)\nPainful \\(O(b^m)\\) time and space complexity"
  },
  {
    "objectID": "4511/notes/02/02.html#choosing-heuristics",
    "href": "4511/notes/02/02.html#choosing-heuristics",
    "title": "Search",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nRecall: \\(h(n)\\) estimates cost from \\(n\\) to goal\n\n\n\n\n\nAdmissibility\nConsistency"
  },
  {
    "objectID": "4511/notes/02/02.html#choosing-heuristics-1",
    "href": "4511/notes/02/02.html#choosing-heuristics-1",
    "title": "Search",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nAdmissibility\n\nNever overestimates cost from \\(n\\) to goal\nCost-optimal!\n\nConsistency\n\n\\(h(n) \\leq c(n, a, n') + h(n')\\)\n\\(n'\\) successors of \\(n\\)\n\\(c(n, a, n')\\) cost from \\(n\\) to \\(n'\\) given action \\(a\\)"
  },
  {
    "objectID": "4511/notes/02/02.html#consistency",
    "href": "4511/notes/02/02.html#consistency",
    "title": "Search",
    "section": "Consistency",
    "text": "Consistency\n\nConsistent heuristics are admissible\n\nInverse not necessarily true\n\nAlways reach each state on optimal path\nImplications for inconsistent heuristic?"
  },
  {
    "objectID": "4511/notes/02/02.html#is-optimality-desirable",
    "href": "4511/notes/02/02.html#is-optimality-desirable",
    "title": "Search",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?"
  },
  {
    "objectID": "4511/notes/02/02.html#is-optimality-desirable-1",
    "href": "4511/notes/02/02.html#is-optimality-desirable-1",
    "title": "Search",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes"
  },
  {
    "objectID": "4511/notes/02/02.html#is-optimality-desirable-2",
    "href": "4511/notes/02/02.html#is-optimality-desirable-2",
    "title": "Search",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes, but it isn’t always feasible\n\nA* search still exponentially complex in solution length\nOptimality is never guaranteed “inexpensively”\n\nWe need strategies for “good enough” solutions"
  },
  {
    "objectID": "4511/notes/02/02.html#satisficing",
    "href": "4511/notes/02/02.html#satisficing",
    "title": "Search",
    "section": "Satisficing",
    "text": "Satisficing\n\nsatisfy - verb - To give satisfaction; to afford gratification; to leave nothing to be desired.1\n\n\nsuffice - verb - To be enough, or sufficient; to meet the need (of anything)2\n\nWebster’s, 1913Webster’s, 1913"
  },
  {
    "objectID": "4511/notes/02/02.html#weighted-a-search",
    "href": "4511/notes/02/02.html#weighted-a-search",
    "title": "Search",
    "section": "Weighted A* Search",
    "text": "Weighted A* Search\n\nGreedy: \\(f(n) = h(n)\\)\nA*: \\(f(n) = h(n) + g(n)\\)\nUniform-Cost Search: \\(f(n) = g(n)\\)\n\n…\n\nWeighted A* Search: \\(f(n) = W\\cdot h(n) + g(n)\\)\n\nWeight \\(W &gt; 1\\)"
  },
  {
    "objectID": "4511/notes/02/02.html#reducing-complexity",
    "href": "4511/notes/02/02.html#reducing-complexity",
    "title": "Search",
    "section": "Reducing Complexity",
    "text": "Reducing Complexity\n\nFrontier Management\nElimination of \\(reached\\) collection\n\nReference counts\nHow else?\n\n\n\n\n\nOther searches"
  },
  {
    "objectID": "4511/notes/02/02.html#iterative-deepening-a-search",
    "href": "4511/notes/02/02.html#iterative-deepening-a-search",
    "title": "Search",
    "section": "Iterative-Deepening A* Search",
    "text": "Iterative-Deepening A* Search\n\n“IDA*” Search\n\nSimilar to Iterative Deepening with Depth-First Search\n\nDFS uses depth cutoff\nIDA* uses \\(h(n) + g(n)\\) cutoff with DFS\nOnce cutoff breached, new cutoff:\n\nTypically next-largest \\(h(n) + g(n)\\)\n\n\\(O(b^m)\\) time complexity 😔\n\\(O(d)\\) space complexity1 😌\n\n\n\nThis is slightly complicated based on heuristic branching factor \\(b_h\\)."
  },
  {
    "objectID": "4511/notes/02/02.html#beam-search",
    "href": "4511/notes/02/02.html#beam-search",
    "title": "Search",
    "section": "Beam Search",
    "text": "Beam Search\n\nBest-First Search:\n\nFrontier is all expanded nodes\n\nBeam Search:\n\n\\(k\\) “best” nodes are kept on frontier\n\nOthers discarded\n\nAlt: all nodes within \\(\\delta\\) of best node\nNot Optimal\nNot Complete"
  },
  {
    "objectID": "4511/notes/02/02.html#recursive-best-first-search-rbfs",
    "href": "4511/notes/02/02.html#recursive-best-first-search-rbfs",
    "title": "Search",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)\n\nNo \\(reached\\) table is kept\nSecond-best node \\(f(n)\\) retained\n\nSearch from each node cannot exceed this limit\nIf exceeded, recursion “backs up” to previous node\n\nMemory-efficient\n\nCan “cycle” between branches"
  },
  {
    "objectID": "4511/notes/02/02.html#recursive-best-first-search-rbfs-1",
    "href": "4511/notes/02/02.html#recursive-best-first-search-rbfs-1",
    "title": "Search",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)"
  },
  {
    "objectID": "4511/notes/02/02.html#heuristic-characteristics",
    "href": "4511/notes/02/02.html#heuristic-characteristics",
    "title": "Search",
    "section": "Heuristic Characteristics",
    "text": "Heuristic Characteristics\n\nWhat makes a “good” heuristic?\n\nWe know about admissability and consistency\nWhat about performance?\n\nEffective branching factor\nEffective depth\n# of nodes expanded"
  },
  {
    "objectID": "4511/notes/02/02.html#where-do-heuristics-come-from",
    "href": "4511/notes/02/02.html#where-do-heuristics-come-from",
    "title": "Search",
    "section": "Where Do Heuristics Come From?",
    "text": "Where Do Heuristics Come From?\n\nIntuition\n\n“Just Be Really Smart”\n\nRelaxation\n\nThe problem is constrained\nRemove the constraint\n\nPre-computation\n\nSub problems\n\nLearning"
  },
  {
    "objectID": "4511/notes/02/02.html#references",
    "href": "4511/notes/02/02.html#references",
    "title": "Search",
    "section": "References",
    "text": "References\n\nStuart J. Russell and Peter Norvig. Artificial Intelligence: A Modern Approach. 4th Edition, 2020.\nStanford CS231\nUC Berkeley CS188"
  },
  {
    "objectID": "4511/index.html",
    "href": "4511/index.html",
    "title": "CSCI 4511/6511 Spring 2025",
    "section": "",
    "text": "Syllabus"
  },
  {
    "objectID": "4511/index.html#notes",
    "href": "4511/index.html#notes",
    "title": "CSCI 4511/6511 Spring 2025",
    "section": "Notes",
    "text": "Notes\nOne | Python\nTwo | PDF\nThree | PDF"
  },
  {
    "objectID": "4511/index.html#homework",
    "href": "4511/index.html#homework",
    "title": "CSCI 4511/6511 Spring 2025",
    "section": "Homework",
    "text": "Homework\nHomework One\nHomework Two"
  },
  {
    "objectID": "4511/index.html#exercises",
    "href": "4511/index.html#exercises",
    "title": "CSCI 4511/6511 Spring 2025",
    "section": "Exercises",
    "text": "Exercises\nPython Warmup"
  },
  {
    "objectID": "teaching_writing.html",
    "href": "teaching_writing.html",
    "title": "Teaching and Writing",
    "section": "",
    "text": "Teaching\nCurrently:\n\nCSCI 1012 Intro. Programming in Python\n\nCourse Site\n\nCSCI 4511/6511 Artificial Intelligence Algorithms\n\nCourse Notes\n\n\nPreviously:\n\nCSCI 6366/4366 Neural Networks & Deep Learning\nCSCI 6531/4531 Computer Security\nCSCI 6917 Guided Research\nSEAS 6402 Data Analytics Capstone\n\nLectures:\n\nCSCI 1111 Intro. Software Development\nCSCI 4364/6364 Machine Learning\nMS&E 250A (Stanford) Risk Analysis\nMS&E 350 (Stanford) Risk Analysis Seminar\nAA 149 (Stanford) Operation of Aerospace Systems\n\n\n\nWriting\nK. Dobolyi, G. P. Sieniawski, D. Dobolyi, J. Goldfrank, and Z. Hampel-Arias, “Hindsight2020: Characterizing Uncertainty in the COVID-19 Scientific Literature,” Disaster Medicine and Public Health Preparedness, vol. 17, p. e437, 2023. doi:10.1017/dmp.2023.82\nJ. Goldfrank, M. E. Paté-Cornell, G. Forbes, and D. Liedtka, “Risk Reduction in Target Motion Analysis Using Approximate Dynamic Programming.” Military Operations Research, no. 1, 5–26, 2023 https://www.jstor.org/stable/27207613.\nL. Tindall, Z. Hampel-Arias, J. Goldfrank, E. Mair and T. Q. Nguven, ”Localizing Radio Frequency Targets Using Reinforcement Learning,” 2021 IEEE International Symposium on Robotic and Sensors Environments (ROSE), FL, USA, 2021, pp. 1-7, doi: 10.1109/ROSE52750.2021.9611756."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joe Goldfrank",
    "section": "",
    "text": "Assistant Professor of Practice Department of Computer Science George Washington University\n\nI joined the GWU Department of Computer Science as a Visiting Professor in August 2022, and as an Assistant Professor of Practice in August 2023. You might read more about teaching and writing I have done.\nBefore this, I completed my PhD in Decision & Risk Analysis under the guidance of Elisabeth Paté-Cornell at Stanford University in California.\nSome years ago, I served on active duty in the U.S. Navy as a nuclear submarine line officer, and worked at the DOD Strategic Capabilities Office. I completed a B.S. (with honors) in Physics at the College of William and Mary in 2009.\nI was genuinely honored to be awarded 2023-2024 Professor of the Year by the Computer Science student body.\nI am interested in improving the decisions that humans make. What that means is determined by each human.\nAdjacent to the university, I make acoustic, electric, and electronic music."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Office Hours\nAny GW student is welcome at my office hours. These hours are current for Spring 2025.\n\n\n\n\nDay\nTime\n\n\n\n\nMondays\n12:00 PM - 2:00 PM\n\n\nWednesdays\n1:00 PM - 3:30 PM\n\n\nFridays\n3:30 - 6:00 PM\n\n\n\n\nThe location is typically SEH 4675, although I am often in the SEH 4th floor lobby area, as my office is small and windowless.\nYou are welcome to make an appointment. Appointments are not necessary, but will receive priority if you send an agenda at least 24 hours in advance.\nMy office can be slightly difficult to find:\n\nIt is on SEH 4th Floor, West wing\n\nExiting the elevators, make a right\nFrom the top of the stairs, go straight\n\nGo through the glass door (your card will work)\nMake a right where a right can be made, then an immediate left\nSEH 4675 will be on the left\n\n\n\nElectronic Mail\nMy address is joe.goldfrank@gwu.edu. My notes are typically short, direct, and polite; I encourage you to write to me in this way.\nLately there is a trend towards long formal notes, perhaps generated with some algorithm (many of them look the same). This style makes it harder for me to find your message amidst all the words.\nPlease refrain from sending me sales/marketing materials, I will mark these as spam."
  },
  {
    "objectID": "advising.html",
    "href": "advising.html",
    "title": "Advising",
    "section": "",
    "text": "Undergraduate\nIf I am your undergraduate advisor, email and office hours are the most straightforward ways to discuss your questions.\n\n\nGraduate\nI am not currently soliciting applications, however any graduate student interested in collaborating is welcome to send me a proposal. It does not have to be particularly formal, however:\n\nTell me what questions you are interested in answering\nShow me what other work has been done in this avenue\nDiscuss a plan for executing your project\n\nI am fond of the Heilmeier Catechism, although it is not a perfect match for many kinds of academic research questions."
  },
  {
    "objectID": "4511/exercises/python.html",
    "href": "4511/exercises/python.html",
    "title": "Python Warmup",
    "section": "",
    "text": "In this exercise we will express a map of the DC Metro in Python 3 so that we might solve certain pathfinding problems.\nOne of the principal challenges of designing autonomous agents that work in the real world is creating useful models of the real world. Recall that all models are wrong: a useful model is a model that we can solve problems “on” such that our solutions (on the model) suggestion actions (in the real world) that, when taken, result in outcomes1 that we want.\n1 Everyone has them.This exercise reviews objected-oriented Python programming (which you may have just learned) and tree search algorithms (prerequisite material)."
  },
  {
    "objectID": "4511/exercises/python.html#what-and-why",
    "href": "4511/exercises/python.html#what-and-why",
    "title": "Python Warmup",
    "section": "",
    "text": "In this exercise we will express a map of the DC Metro in Python 3 so that we might solve certain pathfinding problems.\nOne of the principal challenges of designing autonomous agents that work in the real world is creating useful models of the real world. Recall that all models are wrong: a useful model is a model that we can solve problems “on” such that our solutions (on the model) suggestion actions (in the real world) that, when taken, result in outcomes1 that we want.\n1 Everyone has them.This exercise reviews objected-oriented Python programming (which you may have just learned) and tree search algorithms (prerequisite material)."
  },
  {
    "objectID": "4511/exercises/python.html#the-solution",
    "href": "4511/exercises/python.html#the-solution",
    "title": "Python Warmup",
    "section": "The Solution",
    "text": "The Solution\nHere are the “questions” we would like to answer with our model:\n\nWhat is the path between two metro stations?\nWhat is the median travel time between two metro stations on a specific path?\nWhat is the 90th percentile2 travel time between two metro stations on a specific path?\nWhat is the 10th percentile travel time between any two metro stations on a specific path?\n\n2 i.e., time that is longer than 90% of times for the same trip.We would like for our model to account for transfers between train lines (and how much time those transfers take). We would also like for our model to account for wait time at the starting station before the arrival of the first relevant train."
  },
  {
    "objectID": "4511/exercises/python.html#the-problem",
    "href": "4511/exercises/python.html#the-problem",
    "title": "Python Warmup",
    "section": "The Problem",
    "text": "The Problem\nWe don’t need to implement a solution method for this exercise. Rather, we’re going to express a model that could be used to solve the problem. What we’ll need:\n\nStations\nWrite a Python Station class that models a single station on the metro. The stations can be found on the WMATA Map; your class should be “generic” such that it can accommodate any station in the system. These stations:\n\nServe only a single line\nServe multiple lines that are parallel in both directions\nServe multiple lines that are divergent in both directions\nServe multiple lines that are parallel in one direction and divergent in others\n\nYour class should include some way to connect stations in the model as they are connected in the real metro system. There is more than one way to accomplish this: you might implement a class the represents edges, but you don’t have to.\nYour class(es) should also capture information about travel times between stations.3\n3 This travel time isn’t present on the WMATA map. Let us assume it can be quantified.Implement a getSuccessors method for your Station class that returns a tuple of adjacent stations.\n\n\n\n\n\n\nThis Exercise Seems Too Easy\n\n\n\n\n\nPunishment gluttons are encouraged to implement the model for the NYC MTA system instead. The NYC subway has “local” and “express” trains that run on parallel tracks.\n\n\n\n\n\nSearch\nRecall the tree search algorithms you studied as a younger person. These algorithms could be used to determine the path (and from the path, we can calculate travel times).\nTo aid implementation of tree search algorithms for this problem, create a Node class to facilitate the tree representation of the graph problem. This class should include, at a minimum, instance variables that reference a Station and a parent Node."
  },
  {
    "objectID": "4511/exercises/python.html#dont-solve-the-problem",
    "href": "4511/exercises/python.html#dont-solve-the-problem",
    "title": "Python Warmup",
    "section": "Don’t Solve The Problem",
    "text": "Don’t Solve The Problem\nIf you’ve completed the above, you’re warmed up and ready to start Homework One. The early parts of Homework One review search algorithms from CSCI 3212 and 6212. The latter parts rely on algorithms we’ll learn in lecture two."
  },
  {
    "objectID": "4511/notes/03/03x.html#announcements",
    "href": "4511/notes/03/03x.html#announcements",
    "title": "Local Search & Games",
    "section": "Announcements",
    "text": "Announcements\n\n\nHomework 1 is due on 7 February at 11:55 PM\n\nLate submission policy\n\nHomework 2 is due on 21 February at 11:55 PM"
  },
  {
    "objectID": "4511/notes/03/03x.html#why-are-we-here",
    "href": "4511/notes/03/03x.html#why-are-we-here",
    "title": "Local Search & Games",
    "section": "Why Are We Here?",
    "text": "Why Are We Here?"
  },
  {
    "objectID": "4511/notes/03/03x.html#why-are-we-here-1",
    "href": "4511/notes/03/03x.html#why-are-we-here-1",
    "title": "Local Search & Games",
    "section": "Why Are We Here?",
    "text": "Why Are We Here?\n\n⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣶⣶⣶⣶⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀\n⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀\n⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀\n⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀\n⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋            ⠀⣀⣄⡀      ⠀⠀⣠⣄⡀\n⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀            ⢸⣿⣿⣿      ⠀⢸⣿⣿⣿\n⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠀            ⠉⠋⠁      ⠀⠀⠙⠋⠁\n⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀\n⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⠀⠀⠀⠀\n⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀\n⠀⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠛⠿⠿⠿⠿⠛⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀"
  },
  {
    "objectID": "4511/notes/03/03x.html#search-why",
    "href": "4511/notes/03/03x.html#search-why",
    "title": "Local Search & Games",
    "section": "Search: Why?",
    "text": "Search: Why?\n\nFully-observed problem\nDeterministic actions and state\nWell-defined start and goal\n\n“Well-defined”"
  },
  {
    "objectID": "4511/notes/03/03x.html#goal-tests",
    "href": "4511/notes/03/03x.html#goal-tests",
    "title": "Local Search & Games",
    "section": "Goal Tests",
    "text": "Goal Tests"
  },
  {
    "objectID": "4511/notes/03/03x.html#goal-tests-1",
    "href": "4511/notes/03/03x.html#goal-tests-1",
    "title": "Local Search & Games",
    "section": "Goal Tests",
    "text": "Goal Tests"
  },
  {
    "objectID": "4511/notes/03/03x.html#best-first-search",
    "href": "4511/notes/03/03x.html#best-first-search",
    "title": "Local Search & Games",
    "section": "Best-First Search",
    "text": "Best-First Search"
  },
  {
    "objectID": "4511/notes/03/03x.html#a-search",
    "href": "4511/notes/03/03x.html#a-search",
    "title": "Local Search & Games",
    "section": "A* Search",
    "text": "A* Search\n\nInclude path-cost \\(g(n)\\)\n\n\\(f(n) = g(n) + h(n)\\)\n\n\n\n\n\n\nComplete (always)\nOptimal (sometimes)\n\nPainful \\(O(b^m)\\) time and space complexity"
  },
  {
    "objectID": "4511/notes/03/03x.html#a-vs.-dijkstra",
    "href": "4511/notes/03/03x.html#a-vs.-dijkstra",
    "title": "Local Search & Games",
    "section": "A* vs. Dijkstra",
    "text": "A* vs. Dijkstra\n(example)\n \n\nAdvantages?\nDisadvantages?"
  },
  {
    "objectID": "4511/notes/03/03x.html#choosing-heuristics",
    "href": "4511/notes/03/03x.html#choosing-heuristics",
    "title": "Local Search & Games",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nRecall: \\(h(n)\\) estimates cost from \\(n\\) to goal\n\n\n\n\n\nAdmissibility\nConsistency"
  },
  {
    "objectID": "4511/notes/03/03x.html#choosing-heuristics-1",
    "href": "4511/notes/03/03x.html#choosing-heuristics-1",
    "title": "Local Search & Games",
    "section": "Choosing Heuristics",
    "text": "Choosing Heuristics\n\nAdmissibility\n\nNever overestimates cost from \\(n\\) to goal\nCost-optimal!\n\nConsistency\n\n\\(h(n) \\leq c(n, a, n') + h(n')\\)\n\\(n'\\) successors of \\(n\\)\n\\(c(n, a, n')\\) cost from \\(n\\) to \\(n'\\) given action \\(a\\)"
  },
  {
    "objectID": "4511/notes/03/03x.html#consistency",
    "href": "4511/notes/03/03x.html#consistency",
    "title": "Local Search & Games",
    "section": "Consistency",
    "text": "Consistency\n\nConsistent heuristics are admissible\n\nInverse not necessarily true\n\nAlways reach each state on optimal path\nImplications for inconsistent heuristic?"
  },
  {
    "objectID": "4511/notes/03/03x.html#is-optimality-desirable",
    "href": "4511/notes/03/03x.html#is-optimality-desirable",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?"
  },
  {
    "objectID": "4511/notes/03/03x.html#is-optimality-desirable-1",
    "href": "4511/notes/03/03x.html#is-optimality-desirable-1",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes"
  },
  {
    "objectID": "4511/notes/03/03x.html#is-optimality-desirable-2",
    "href": "4511/notes/03/03x.html#is-optimality-desirable-2",
    "title": "Local Search & Games",
    "section": "Is Optimality Desirable?",
    "text": "Is Optimality Desirable?\n\nYes, but it isn’t always feasible\n\nA* search still exponentially complex in solution length\nOptimality is never guaranteed “inexpensively”\n\nWe need strategies for “good enough” solutions"
  },
  {
    "objectID": "4511/notes/03/03x.html#satisficing",
    "href": "4511/notes/03/03x.html#satisficing",
    "title": "Local Search & Games",
    "section": "Satisficing",
    "text": "Satisficing\n\nsatisfy - verb - To give satisfaction; to afford gratification; to leave nothing to be desired.1\n\n\nsuffice - verb - To be enough, or sufficient; to meet the need (of anything)2\n\nWebster’s, 1913Webster’s, 1913"
  },
  {
    "objectID": "4511/notes/03/03x.html#weighted-a-search",
    "href": "4511/notes/03/03x.html#weighted-a-search",
    "title": "Local Search & Games",
    "section": "Weighted A* Search",
    "text": "Weighted A* Search\n\nGreedy: \\(f(n) = h(n)\\)\nA*: \\(f(n) = h(n) + g(n)\\)\nUniform-Cost Search: \\(f(n) = g(n)\\)\n\n…\n\nWeighted A* Search: \\(f(n) = W\\cdot h(n) + g(n)\\)\n\nWeight \\(W &gt; 1\\)"
  },
  {
    "objectID": "4511/notes/03/03x.html#reducing-complexity",
    "href": "4511/notes/03/03x.html#reducing-complexity",
    "title": "Local Search & Games",
    "section": "Reducing Complexity",
    "text": "Reducing Complexity\n\nFrontier Management\nElimination of \\(reached\\) collection\n\nReference counts\nHow else?\n\n\n\n\n\nOther searches"
  },
  {
    "objectID": "4511/notes/03/03x.html#iterative-deepening-a-search",
    "href": "4511/notes/03/03x.html#iterative-deepening-a-search",
    "title": "Local Search & Games",
    "section": "Iterative-Deepening A* Search",
    "text": "Iterative-Deepening A* Search\n\n“IDA*” Search\n\nSimilar to Iterative Deepening with Depth-First Search\n\nDFS uses depth cutoff\nIDA* uses \\(h(n) + g(n)\\) cutoff with DFS\nOnce cutoff breached, new cutoff:\n\nTypically next-largest \\(h(n) + g(n)\\)\n\n\\(O(b^m)\\) time complexity 😔\n\\(O(d)\\) space complexity1 😌\n\n\n\nThis is slightly complicated based on heuristic branching factor \\(b_h\\)."
  },
  {
    "objectID": "4511/notes/03/03x.html#beam-search",
    "href": "4511/notes/03/03x.html#beam-search",
    "title": "Local Search & Games",
    "section": "Beam Search",
    "text": "Beam Search\n\nBest-First Search:\n\nFrontier is all expanded nodes\n\nBeam Search:\n\n\\(k\\) “best” nodes are kept on frontier\n\nOthers discarded\n\nAlt: all nodes within \\(\\delta\\) of best node\nNot Optimal\nNot Complete"
  },
  {
    "objectID": "4511/notes/03/03x.html#recursive-best-first-search-rbfs",
    "href": "4511/notes/03/03x.html#recursive-best-first-search-rbfs",
    "title": "Local Search & Games",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)\n\nNo \\(reached\\) table is kept\nSecond-best node \\(f(n)\\) retained\n\nSearch from each node cannot exceed this limit\nIf exceeded, recursion “backs up” to previous node\n\nMemory-efficient\n\nCan “cycle” between branches"
  },
  {
    "objectID": "4511/notes/03/03x.html#recursive-best-first-search-rbfs-1",
    "href": "4511/notes/03/03x.html#recursive-best-first-search-rbfs-1",
    "title": "Local Search & Games",
    "section": "Recursive Best-First Search (RBFS)",
    "text": "Recursive Best-First Search (RBFS)"
  },
  {
    "objectID": "4511/notes/03/03x.html#heuristic-characteristics",
    "href": "4511/notes/03/03x.html#heuristic-characteristics",
    "title": "Local Search & Games",
    "section": "Heuristic Characteristics",
    "text": "Heuristic Characteristics\n\nWhat makes a “good” heuristic?\n\nWe know about admissability and consistency\nWhat about performance?\n\nEffective branching factor\nEffective depth\n# of nodes expanded"
  },
  {
    "objectID": "4511/notes/03/03x.html#where-do-heuristics-come-from",
    "href": "4511/notes/03/03x.html#where-do-heuristics-come-from",
    "title": "Local Search & Games",
    "section": "Where Do Heuristics Come From?",
    "text": "Where Do Heuristics Come From?\n\nIntuition\n\n“Just Be Really Smart”\n\nRelaxation\n\nThe problem is constrained\nRemove the constraint\n\nPre-computation\n\nSub problems\n\nLearning"
  },
  {
    "objectID": "4511/notes/03/03x.html#what-even-is-the-goal",
    "href": "4511/notes/03/03x.html#what-even-is-the-goal",
    "title": "Local Search & Games",
    "section": "What Even Is The Goal?",
    "text": "What Even Is The Goal?\nUninformed/Informed Search:\n\nKnown start, known goal\nSearch for optimal path\n\nLocal Search:\n\n“Start” is irrelevant\nGoal is not known\n\nBut we know it when we see it\n\nSearch for goal"
  },
  {
    "objectID": "4511/notes/03/03x.html#brutal-example",
    "href": "4511/notes/03/03x.html#brutal-example",
    "title": "Local Search & Games",
    "section": "Brutal Example",
    "text": "Brutal Example"
  },
  {
    "objectID": "4511/notes/03/03x.html#less-brutal-example",
    "href": "4511/notes/03/03x.html#less-brutal-example",
    "title": "Local Search & Games",
    "section": "Less-Brutal Example",
    "text": "Less-Brutal Example"
  },
  {
    "objectID": "4511/notes/03/03x.html#real-world-examples",
    "href": "4511/notes/03/03x.html#real-world-examples",
    "title": "Local Search & Games",
    "section": "“Real-World” Examples",
    "text": "“Real-World” Examples\n\nScheduling\nLayout optimization\n\nFactories\nCircuits\n\nPortfolio management\nOthers?"
  },
  {
    "objectID": "4511/notes/03/03x.html#objective-function",
    "href": "4511/notes/03/03x.html#objective-function",
    "title": "Local Search & Games",
    "section": "Objective Function",
    "text": "Objective Function\n\nDo you know what you want?1\nCan you express it mathematically?2\n\nA single value\nMore is better\n\nObjective function: a function of state\n\nIf not, you might be humanIf not, you might be human"
  },
  {
    "objectID": "4511/notes/03/03x.html#hill-climbing",
    "href": "4511/notes/03/03x.html#hill-climbing",
    "title": "Local Search & Games",
    "section": "Hill-Climbing",
    "text": "Hill-Climbing\n\nObjective function\nState space mapping\n\nNeighbors"
  },
  {
    "objectID": "4511/notes/03/03x.html#hill-climbing-1",
    "href": "4511/notes/03/03x.html#hill-climbing-1",
    "title": "Local Search & Games",
    "section": "Hill-Climbing",
    "text": "Hill-Climbing"
  },
  {
    "objectID": "4511/notes/03/03x.html#the-hazards-of-climbing-hills",
    "href": "4511/notes/03/03x.html#the-hazards-of-climbing-hills",
    "title": "Local Search & Games",
    "section": "The Hazards of Climbing Hills",
    "text": "The Hazards of Climbing Hills\n\nLocal maxima\nPlateaus\nRidges"
  },
  {
    "objectID": "4511/notes/03/03x.html#five-queens",
    "href": "4511/notes/03/03x.html#five-queens",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03x.html#five-queens-1",
    "href": "4511/notes/03/03x.html#five-queens-1",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03x.html#five-queens-2",
    "href": "4511/notes/03/03x.html#five-queens-2",
    "title": "Local Search & Games",
    "section": "Five Queens",
    "text": "Five Queens"
  },
  {
    "objectID": "4511/notes/03/03x.html#variations",
    "href": "4511/notes/03/03x.html#variations",
    "title": "Local Search & Games",
    "section": "Variations",
    "text": "Variations\n\nSideways moves\n\nNot free\n\nStochastic moves\n\nFull set\nFirst choice\n\nRandom restarts\n\nIf at first you don’t succeed, you fail try again!\nComplete 😌"
  },
  {
    "objectID": "4511/notes/03/03x.html#the-trouble-with-local-maxima",
    "href": "4511/notes/03/03x.html#the-trouble-with-local-maxima",
    "title": "Local Search & Games",
    "section": "The Trouble with Local Maxima",
    "text": "The Trouble with Local Maxima\n\nWe don’t know that they’re local maxima\n\nUnless we do?\n\nHill climbing is efficient\n\nBut gets trapped\n\nExhaustive search is complete\n\nBut it’s exhaustive!\nStochastic methods are ‘exhaustive’"
  },
  {
    "objectID": "4511/notes/03/03x.html#simulated-annealing",
    "href": "4511/notes/03/03x.html#simulated-annealing",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing"
  },
  {
    "objectID": "4511/notes/03/03x.html#simulated-annealing-1",
    "href": "4511/notes/03/03x.html#simulated-annealing-1",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing\n\nDoesn’t actually have anything to do with metallurgy\nSearch begins with high “temperature”\n\nTemperature decreases during search\n\nNext state selected randomly\n\nImprovements always accepted\nNon-improvements rejected stochastically\nHigher temperature, less rejection\n“Worse” result, more rejection"
  },
  {
    "objectID": "4511/notes/03/03x.html#simulated-annealing-2",
    "href": "4511/notes/03/03x.html#simulated-annealing-2",
    "title": "Local Search & Games",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing"
  },
  {
    "objectID": "4511/notes/03/03x.html#local-beam-search",
    "href": "4511/notes/03/03x.html#local-beam-search",
    "title": "Local Search & Games",
    "section": "Local Beam Search",
    "text": "Local Beam Search\nRecall:\n\nBeam search keeps track of \\(k\\) “best” branches\n\nLocal Beam Search:\n\nHill climbing search, keeping track of \\(k\\) successors\n\nDeterministic\nStochastic"
  },
  {
    "objectID": "4511/notes/03/03x.html#local-beam-search-1",
    "href": "4511/notes/03/03x.html#local-beam-search-1",
    "title": "Local Search & Games",
    "section": "Local Beam Search",
    "text": "Local Beam Search"
  },
  {
    "objectID": "4511/notes/03/03x.html#the-real-world-is-discrete",
    "href": "4511/notes/03/03x.html#the-real-world-is-discrete",
    "title": "Local Search & Games",
    "section": "The Real World Is Discrete",
    "text": "The Real World Is Discrete\n\n\n\n(it isn’t)"
  },
  {
    "objectID": "4511/notes/03/03x.html#the-real-world-is-not-discrete",
    "href": "4511/notes/03/03x.html#the-real-world-is-not-discrete",
    "title": "Local Search & Games",
    "section": "The Real World Is Not Discrete",
    "text": "The Real World Is Not Discrete\n\nDiscretize continuous space\n\nWorks iff no objective function discontinuities\nWhat happens if there are discontinuities?\nHow do we know that there are discontinuities?"
  },
  {
    "objectID": "4511/notes/03/03x.html#gradient-descent",
    "href": "4511/notes/03/03x.html#gradient-descent",
    "title": "Local Search & Games",
    "section": "Gradient Descent",
    "text": "Gradient Descent\n\nMinimize loss instead of climb hill\n\nStill the same idea\n\n\nConsider:\n\nOne state variable, \\(x\\)\nObjective function \\(f(x)\\)\n\nHow do we minimize \\(f(x)\\) ?\nIs there a closed form \\(\\frac{d}{dx}\\) ?"
  },
  {
    "objectID": "4511/notes/03/03x.html#gradient-descent-1",
    "href": "4511/notes/03/03x.html#gradient-descent-1",
    "title": "Local Search & Games",
    "section": "Gradient Descent",
    "text": "Gradient Descent\nMultivariate \\(\\vec{x} = x_0, x_1, ...\\)\n\n\nInstead of derivative, gradient:\n\\(\\nabla f(\\vec{x}) = \\left[ \\frac{\\partial f}{\\partial x_0}, \\frac{\\partial f}{\\partial x_1}, ...\\right]\\)\n\n\n“Locally” descend gradient:\n\\(\\vec{x} \\gets \\vec{x} + \\alpha \\nabla f(\\vec{x})\\)"
  },
  {
    "objectID": "4511/notes/03/03x.html#probability-1",
    "href": "4511/notes/03/03x.html#probability-1",
    "title": "Local Search & Games",
    "section": "Probability",
    "text": "Probability"
  },
  {
    "objectID": "4511/notes/03/03x.html#probability-2",
    "href": "4511/notes/03/03x.html#probability-2",
    "title": "Local Search & Games",
    "section": "Probability",
    "text": "Probability"
  },
  {
    "objectID": "4511/notes/03/03x.html#random-events",
    "href": "4511/notes/03/03x.html#random-events",
    "title": "Local Search & Games",
    "section": "Random Events",
    "text": "Random Events\n\nAlways in the future\nWe know something about them\n\nWe don’t know the outcome with certainty\n\nDistinctions\nProbabilities"
  },
  {
    "objectID": "4511/notes/03/03x.html#first-we-will-play-a-game",
    "href": "4511/notes/03/03x.html#first-we-will-play-a-game",
    "title": "Local Search & Games",
    "section": "First, We Will Play A Game",
    "text": "First, We Will Play A Game\n\nPick a partner\nPlace 11 pieces of candy between you\nAlternating turns, either:\n\nTake one piece\nTake two pieces\n\nLast person to take a piece wins all of the candy"
  },
  {
    "objectID": "4511/notes/03/03x.html#second-we-will-play-a-game",
    "href": "4511/notes/03/03x.html#second-we-will-play-a-game",
    "title": "Local Search & Games",
    "section": "Second, We Will Play A Game",
    "text": "Second, We Will Play A Game\n\nPlace 11 pieces of candy between you\nAlternating turns:\n\nChoose to take one or two pieces\n\nExcept:\n\nAfter choosing, flip two coins, record total number of heads1\nIf total is divisible by 3, take one less piece than you chose\nIf total is divisible by 5, take one more piece than you chose\nIf total divisible by 15, take no candy\n\nLast person to take a piece wins all of the candy\n\nKeep a running total through the game."
  },
  {
    "objectID": "4511/notes/03/03x.html#adversity",
    "href": "4511/notes/03/03x.html#adversity",
    "title": "Local Search & Games",
    "section": "Adversity",
    "text": "Adversity\nSo far:\n\nThe world does not care about us\nThis is a simplifying assumption!\n\nReality:\n\nThe world does not care us\n\n\n\n…but it wants things for “itself”\n\n\n\n\n…and we don’t want the same things"
  },
  {
    "objectID": "4511/notes/03/03x.html#the-adversary",
    "href": "4511/notes/03/03x.html#the-adversary",
    "title": "Local Search & Games",
    "section": "The Adversary",
    "text": "The Adversary\nOne extreme:\n\nSingle adversary\n\nAdversary wants the exact opposite from us\nIf adversary “wins,” we lose\n\n\n\n😐\n\n\nOther extreme:\n\nAn entire world of agents with different values\n\nThey might want some things similar to us\n\n“Economics”\n\n\n\n😐"
  },
  {
    "objectID": "4511/notes/03/03x.html#simple-games",
    "href": "4511/notes/03/03x.html#simple-games",
    "title": "Local Search & Games",
    "section": "Simple Games",
    "text": "Simple Games\n\nTwo-player\nTurn-taking\nDiscrete-state\nFully-observable\nZero-sum\n\nThis does some work for us!"
  },
  {
    "objectID": "4511/notes/03/03x.html#max-and-min",
    "href": "4511/notes/03/03x.html#max-and-min",
    "title": "Local Search & Games",
    "section": "Max and Min",
    "text": "Max and Min\n\nTwo players want the opposite of each other\nState takes into account both agents\n\nActions depend on whose turn it is"
  },
  {
    "objectID": "4511/notes/03/03x.html#minimax",
    "href": "4511/notes/03/03x.html#minimax",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax\n\nInitial state \\(s_0\\)\nActions(\\(s\\)) and To-move(\\(s\\))\nResult(\\(s, a\\))\nIs-Terminal(\\(s\\))\nUtility(\\(s, p\\))"
  },
  {
    "objectID": "4511/notes/03/03x.html#minimax-1",
    "href": "4511/notes/03/03x.html#minimax-1",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax"
  },
  {
    "objectID": "4511/notes/03/03x.html#minimax-2",
    "href": "4511/notes/03/03x.html#minimax-2",
    "title": "Local Search & Games",
    "section": "Minimax",
    "text": "Minimax"
  },
  {
    "objectID": "4511/notes/03/03x.html#more-than-two-players",
    "href": "4511/notes/03/03x.html#more-than-two-players",
    "title": "Local Search & Games",
    "section": "More Than Two Players",
    "text": "More Than Two Players\n\nTwo players, two values: \\(v_A, v_B\\)\n\nZero-sum: \\(v_A = -v_B\\)\nOnly one value needs to be explicitly represented\n\n\\(&gt; 2\\) players:\n\n\\(v_A, v_B, v_C ...\\)\nValue scalar becomes \\(\\vec{v}\\)"
  },
  {
    "objectID": "4511/notes/03/03x.html#society",
    "href": "4511/notes/03/03x.html#society",
    "title": "Local Search & Games",
    "section": "Society",
    "text": "Society\n\n\\(&gt;2\\) players, only one can win\nCooperation can be rational!\n\nExample:\n\nA & B: 30% win probability each\nC: 40% win probability\nA & B cooperate to eliminate C\n\n\\(\\rightarrow\\) A & B: 50% win probability each\n\n\n\n\n…what about friendship?"
  },
  {
    "objectID": "4511/notes/03/03x.html#minimax-efficiency",
    "href": "4511/notes/03/03x.html#minimax-efficiency",
    "title": "Local Search & Games",
    "section": "Minimax Efficiency",
    "text": "Minimax Efficiency\nPruning removes the need to explore the full tree.\n\nMax and Min nodes alternate\nOnce one value has been found, we can eliminate parts of search\n\nLower values, for Max\nHigher values, for Min\n\nRemember highest value (\\(\\alpha\\)) for Max\nRemember lowest value (\\(\\beta\\)) for Min"
  },
  {
    "objectID": "4511/notes/03/03x.html#pruning",
    "href": "4511/notes/03/03x.html#pruning",
    "title": "Local Search & Games",
    "section": "Pruning",
    "text": "Pruning"
  },
  {
    "objectID": "4511/notes/03/03x.html#heuristics",
    "href": "4511/notes/03/03x.html#heuristics",
    "title": "Local Search & Games",
    "section": "Heuristics 😌",
    "text": "Heuristics 😌\n\nIn practice, trees are far too deep to completely search\nHeuristic: replace utility with evaluation function\n\nBetter than losing, worse than winning\nRepresents chance of winning\n\nChance? 🎲🎲\n\nEven in deterministic games\nWhy?"
  },
  {
    "objectID": "4511/notes/03/03x.html#more-pruning",
    "href": "4511/notes/03/03x.html#more-pruning",
    "title": "Local Search & Games",
    "section": "More Pruning",
    "text": "More Pruning\n\nDon’t bother further searching bad moves\n\nExamples?\n\nBeam search\n\nLee Sedol’s singular win against AlphaGo"
  },
  {
    "objectID": "4511/notes/03/03x.html#other-techniques",
    "href": "4511/notes/03/03x.html#other-techniques",
    "title": "Local Search & Games",
    "section": "Other Techniques",
    "text": "Other Techniques\n\nMove ordering\n\nHow do we decide?\n\nLookup tables\n\nFor subsets of games"
  },
  {
    "objectID": "4511/notes/03/03x.html#monte-carlo-tree-search",
    "href": "4511/notes/03/03x.html#monte-carlo-tree-search",
    "title": "Local Search & Games",
    "section": "Monte Carlo Tree Search",
    "text": "Monte Carlo Tree Search\n\nMany games are too large even for an efficient \\(\\alpha\\)-\\(\\beta\\) search 😔\n\nWe can still play them\n\nSimulate plays of entire games from starting state\n\nUpdate win probability from each node (for each player) based on result\n\n“Explore/exploit” paradigm for move selection"
  },
  {
    "objectID": "4511/notes/03/03x.html#choosing-moves",
    "href": "4511/notes/03/03x.html#choosing-moves",
    "title": "Local Search & Games",
    "section": "Choosing Moves",
    "text": "Choosing Moves\n\nWe want our search to pick good moves\nWe want our search to pick unknown moves\nWe don’t want our search to pick bad moves\n\n(Assuming they’re actually bad moves)\n\n\nSelect moves based on a heuristic."
  },
  {
    "objectID": "4511/notes/03/03x.html#games-of-luck",
    "href": "4511/notes/03/03x.html#games-of-luck",
    "title": "Local Search & Games",
    "section": "Games of Luck",
    "text": "Games of Luck\n\nReal-world problems are rarely deterministic\nNon-deterministic state evolution:\n\nRoll a die to determine next position\nToss a coin to determine who picks candy first\nPrecise trajectory of kicked football1\nOthers?\n\n\nAny definition of “football”"
  },
  {
    "objectID": "4511/notes/03/03x.html#solving-non-deterministic-games",
    "href": "4511/notes/03/03x.html#solving-non-deterministic-games",
    "title": "Local Search & Games",
    "section": "Solving Non-Deterministic Games",
    "text": "Solving Non-Deterministic Games\nPreviously: Max and Min alternate turns\nNow:\n\nMax\nChance\nMin\nChance\n\n 😣"
  },
  {
    "objectID": "4511/notes/03/03x.html#expectiminimax",
    "href": "4511/notes/03/03x.html#expectiminimax",
    "title": "Local Search & Games",
    "section": "Expectiminimax",
    "text": "Expectiminimax\n\n“Expected value” of next position\n\n\n\n\n\nHow does this impact branching factor of the search?\n\n🫠"
  },
  {
    "objectID": "4511/notes/03/03x.html#filled-with-uncertainty",
    "href": "4511/notes/03/03x.html#filled-with-uncertainty",
    "title": "Local Search & Games",
    "section": "Filled With Uncertainty",
    "text": "Filled With Uncertainty\nWhat is to be done?\n\nPruning is still possible\n\nHow?\n\nHeuristic evaluation functions\n\nChoose carefully!"
  },
  {
    "objectID": "4511/notes/03/03x.html#non-optimal-adversaries",
    "href": "4511/notes/03/03x.html#non-optimal-adversaries",
    "title": "Local Search & Games",
    "section": "Non-Optimal Adversaries",
    "text": "Non-Optimal Adversaries\n\nIs deterministic “best” behavior optimal?\nAre all adversaries rational?\n\n\n\n\nExpectimax"
  },
  {
    "objectID": "4511/notes/03/03x.html#references",
    "href": "4511/notes/03/03x.html#references",
    "title": "Local Search & Games",
    "section": "References",
    "text": "References\n\nStuart J. Russell and Peter Norvig. Artificial Intelligence: A Modern Approach. 4th Edition, 2020.\nMykal Kochenderfer, Tim Wheeler, and Kyle Wray. Algorithms for Decision Making. 1st Edition, 2022.\nStanford CS231\nStanford CS228\nUC Berkeley CS188"
  },
  {
    "objectID": "4511/notes/01/01.html#good-afternoon",
    "href": "4511/notes/01/01.html#good-afternoon",
    "title": "AI Algorithms  Introduction",
    "section": "Good Afternoon",
    "text": "Good Afternoon"
  },
  {
    "objectID": "4511/notes/01/01.html#how-to-succeed",
    "href": "4511/notes/01/01.html#how-to-succeed",
    "title": "AI Algorithms  Introduction",
    "section": "How To Succeed",
    "text": "How To Succeed\n\nPay Attention\nStart Early\nDo The Work\n\nYourself"
  },
  {
    "objectID": "4511/notes/01/01.html#extremely-important-dates",
    "href": "4511/notes/01/01.html#extremely-important-dates",
    "title": "AI Algorithms  Introduction",
    "section": "Extremely Important Dates",
    "text": "Extremely Important Dates\nMidterm Exam: 7 Mar\n\nFinal Exam: 25 Apr\n\n\n\nArrange to be present for both exams."
  },
  {
    "objectID": "4511/notes/01/01.html#grading",
    "href": "4511/notes/01/01.html#grading",
    "title": "AI Algorithms  Introduction",
    "section": "Grading",
    "text": "Grading\n\n40% Homework average: weighted average of all homework\n\nLowest homework weighted 50%\n\n20% Project:\n\nOne intermediate deliverable\n\n40% Exam average: weighted average of two exams\n\nFinal replaces midterm if final is higher\nMidterm can’t replace final"
  },
  {
    "objectID": "4511/notes/01/01.html#attendance",
    "href": "4511/notes/01/01.html#attendance",
    "title": "AI Algorithms  Introduction",
    "section": "Attendance",
    "text": "Attendance\n\nOptional\nRecommended\nAssumed\nOffice Hours\n\nWhy are there so many?\n\nLate Work\n\nNot accepted.1\n\n\nThis is not strictly true: grace days abound. Use them carefully."
  },
  {
    "objectID": "4511/notes/01/01.html#office-hours",
    "href": "4511/notes/01/01.html#office-hours",
    "title": "AI Algorithms  Introduction",
    "section": "Office Hours",
    "text": "Office Hours\nMe:\n\nMon 12:00-2:00 PM\nWeds 1:00 PM - 3:30 PM\nFri 3:30-6:00 PM\n\nRhys:\n\nWeds 10 AM - Noon"
  },
  {
    "objectID": "4511/notes/01/01.html#the-syllabus",
    "href": "4511/notes/01/01.html#the-syllabus",
    "title": "AI Algorithms  Introduction",
    "section": "The Syllabus",
    "text": "The Syllabus\n\nSyllabus acknowledgement in HW 1\n\nMust be completed before you get credit for anything\nWrite it yourself"
  },
  {
    "objectID": "4511/notes/01/01.html#write-it-yourself",
    "href": "4511/notes/01/01.html#write-it-yourself",
    "title": "AI Algorithms  Introduction",
    "section": "Write It Yourself",
    "text": "Write It Yourself\n\nCopying code (from anywhere!) is generally prohibited, however:\n\nSearching for errors, use of Stack Overflow, etc. is allowed\nUse of code snippets from language documentation is allowed\nCollaborating to understand the algorithms is always allowed\n\nDocument what help you received when solving the problems\n\nYour code will almost certainly show up on your exam."
  },
  {
    "objectID": "4511/notes/01/01.html#write-it-yourself-1",
    "href": "4511/notes/01/01.html#write-it-yourself-1",
    "title": "AI Algorithms  Introduction",
    "section": "Write It Yourself",
    "text": "Write It Yourself\n\nI check my email and respond\nPlease do not use ChatGPT (etc.) to write emails to me\n\n“I hope this email finds you well”\n“I understand the importance of…”\n“I appreciate your time and attention to this matter”\n“I look forward to your prompt response”\n\n\nIf nobody wrote it, why should anybody read it?"
  },
  {
    "objectID": "4511/notes/01/01.html#textbooks",
    "href": "4511/notes/01/01.html#textbooks",
    "title": "AI Algorithms  Introduction",
    "section": "Textbook(s)",
    "text": "Textbook(s)\n\nStuart J. Russell and Peter Norvig. Artificial Intelligence: A Modern Approach. 4th Edition, 2020.\n\nSeveral copies will be on reserve at the GWU Library.\n\nMykal Kochenderfer, Tim Wheeler, and Kyle Wray. Algorithms for Decision Making. 1st Edition, 2022.\nRichard S. Sutton and Andrew G. Barto. Reinforcement Learning: An Introduction. 2nd Edition, 2018."
  },
  {
    "objectID": "4511/notes/01/01.html#mechanics",
    "href": "4511/notes/01/01.html#mechanics",
    "title": "AI Algorithms  Introduction",
    "section": "Mechanics",
    "text": "Mechanics\n\nOne 2.5 hr meeting per week\nExams in person\n\nPeriodic in-class practice\nOpen note\n\nHomework via submit server\nProgramming assignments in Python\n\nIf you don’t know Python: you will."
  },
  {
    "objectID": "4511/notes/01/01.html#how-to-succeed-1",
    "href": "4511/notes/01/01.html#how-to-succeed-1",
    "title": "AI Algorithms  Introduction",
    "section": "How To Succeed",
    "text": "How To Succeed\n\nHomework assignments\n\nStart early1\n\nReadings\n\nActually do them\nLecture notes != readings\n\nExercises\n\nDeliberately open-ended\n\n\nPlease."
  },
  {
    "objectID": "4511/notes/01/01.html#ungraded-exercises",
    "href": "4511/notes/01/01.html#ungraded-exercises",
    "title": "AI Algorithms  Introduction",
    "section": "Ungraded Exercises",
    "text": "Ungraded Exercises\n\nPreparation for homework and exams\nUngraded for flexibility\n\nI assume completion/understanding\n\nStrongly correlated with final letter grade of A"
  },
  {
    "objectID": "4511/notes/01/01.html#do-we-even-need-to-introduce-ai",
    "href": "4511/notes/01/01.html#do-we-even-need-to-introduce-ai",
    "title": "AI Algorithms  Introduction",
    "section": "Do We Even Need to Introduce AI?",
    "text": "Do We Even Need to Introduce AI?\n\nYou have undoubtedly used an LLM\n\nYou have almost certainly used speech-to-text\n\nYou may have ridden in a self-driving car\nYou probably unlock your telephone with your face\n\nConsider how this sentence would have been received in 1995\n\nYou trust software to give you street directions\nYou have probably flown on an airliner with autopilot\nYou might have lost to a computer at chess"
  },
  {
    "objectID": "4511/notes/01/01.html#what-is-artificial-intelligence",
    "href": "4511/notes/01/01.html#what-is-artificial-intelligence",
    "title": "AI Algorithms  Introduction",
    "section": "What Is Artificial Intelligence?",
    "text": "What Is Artificial Intelligence?\nWhat is intelligence?\n\nThought\nReasoning\nBehavior\n\nDo we need all three?\nDoes “AI” need all three?"
  },
  {
    "objectID": "4511/notes/01/01.html#is-it-intelligent",
    "href": "4511/notes/01/01.html#is-it-intelligent",
    "title": "AI Algorithms  Introduction",
    "section": "Is It Intelligent?",
    "text": "Is It Intelligent?\n\n\n\n\n\n\n\n\nImages: Speed Queen, Volvo"
  },
  {
    "objectID": "4511/notes/01/01.html#rationality",
    "href": "4511/notes/01/01.html#rationality",
    "title": "AI Algorithms  Introduction",
    "section": "Rationality",
    "text": "Rationality\n\nDecisions\nOutcomes\nValues\n\nIt is possible to make better decisions.\n\n\nRational agents make better decisions."
  },
  {
    "objectID": "4511/notes/01/01.html#which-decision",
    "href": "4511/notes/01/01.html#which-decision",
    "title": "AI Algorithms  Introduction",
    "section": "Which Decision?",
    "text": "Which Decision?\n\n\n\nPay $17 for this pizza, delivered\nPay $21 for the same pizza, delivered"
  },
  {
    "objectID": "4511/notes/01/01.html#basically-the-same-problem",
    "href": "4511/notes/01/01.html#basically-the-same-problem",
    "title": "AI Algorithms  Introduction",
    "section": "Basically The Same Problem",
    "text": "Basically The Same Problem\n\n\nImage: Bloomberg"
  },
  {
    "objectID": "4511/notes/01/01.html#expected-utility",
    "href": "4511/notes/01/01.html#expected-utility",
    "title": "AI Algorithms  Introduction",
    "section": "Expected Utility",
    "text": "Expected Utility\nWhich would you prefer?\n\nReceive $10\nFlip a fair coin:\n\nHeads - Pay $10\nTails - Receive $100\n\n\n\n\n\nMany outcomes aren’t directly expressed in dollars\nRational agents maximize expected utility"
  },
  {
    "objectID": "4511/notes/01/01.html#defining-ai-again",
    "href": "4511/notes/01/01.html#defining-ai-again",
    "title": "AI Algorithms  Introduction",
    "section": "Defining AI, Again",
    "text": "Defining AI, Again\n\nThought “vs.” Action\nHuman “vs.” Rational\nWhat is necessary?\n\nAll four combinations have been asserted"
  },
  {
    "objectID": "4511/notes/01/01.html#errors",
    "href": "4511/notes/01/01.html#errors",
    "title": "AI Algorithms  Introduction",
    "section": "Errors",
    "text": "Errors\n\nWhat happens when a human crashes1 a bicycle?\nWhat happens when a self-driving car crashes2?\nWho is responsible when a self-driving car crashes?\n\n\n\nHow do “we” ensure3 AI values align with human values?\nHuman at faultSoftware at fault“ensure”"
  },
  {
    "objectID": "4511/notes/01/01.html#alignment",
    "href": "4511/notes/01/01.html#alignment",
    "title": "AI Algorithms  Introduction",
    "section": "Alignment",
    "text": "Alignment\n\n\nImage: Meme; fair use."
  },
  {
    "objectID": "4511/notes/01/01.html#alignment-1",
    "href": "4511/notes/01/01.html#alignment-1",
    "title": "AI Algorithms  Introduction",
    "section": "Alignment",
    "text": "Alignment\n\nAre universal human values defined?\nHow are AI values defined?\nHow are AI values validated?\n\nThis is an open area of investigation.1\nAnd of concern."
  },
  {
    "objectID": "4511/notes/01/01.html#how-we-got-here",
    "href": "4511/notes/01/01.html#how-we-got-here",
    "title": "AI Algorithms  Introduction",
    "section": "How We Got Here",
    "text": "How We Got Here\n\n\nNeural Networks\n\nPerceptron (McCulloch & Pitts, 1943)\n“Computing Machinery and Intelligence” (Turing, 1950)\n\nLogic\n\nSamuel’s checkers, MANIAC Chess (1950s)\nDartmouth “Artificial Intelligence” conference (1956)\nMinsky & Papert assault perceptrons (1959)"
  },
  {
    "objectID": "4511/notes/01/01.html#how-we-got-here-1",
    "href": "4511/notes/01/01.html#how-we-got-here-1",
    "title": "AI Algorithms  Introduction",
    "section": "How We Got Here",
    "text": "How We Got Here\n\n\nKnowledge/Expert Systems\n\nExpert systems boom (1980s)\nBack propagation paper (Rumelhart et al., 1986)\nExpert systems bust (1990s)\n\nProbabilistic methods\n\nTD-Gammon (1992)\nDeep Blue defeats Kasparov (1997)"
  },
  {
    "objectID": "4511/notes/01/01.html#how-we-got-here-2",
    "href": "4511/notes/01/01.html#how-we-got-here-2",
    "title": "AI Algorithms  Introduction",
    "section": "How We Got Here",
    "text": "How We Got Here\n\n\nNeural Networks\n\nAlexNet computer vision (2012)\nDeepMind Atari (2013)\nAlphaGo defeats Sedol (2016)\nGoogle Translate LSTM (2016)\nAlphaFold (2018)\n\nLarge Language Models\n\nAttention Is All You Need (2017)\nGPT-3.5 (2022)"
  },
  {
    "objectID": "4511/notes/01/01.html#where-do-we-go-now",
    "href": "4511/notes/01/01.html#where-do-we-go-now",
    "title": "AI Algorithms  Introduction",
    "section": "Where Do We Go Now?",
    "text": "Where Do We Go Now?\n\nGame-playing\n\nReal-world tasks that look like games\n\nStatistical generation of text, images, video…\nOpen-ended logical problems\n\nUnsolved problems\n\nProblems with poorly-defined interfaces"
  },
  {
    "objectID": "4511/notes/01/01.html#societal-implications",
    "href": "4511/notes/01/01.html#societal-implications",
    "title": "AI Algorithms  Introduction",
    "section": "Societal Implications",
    "text": "Societal Implications\n\nTranslation\nText generation\n“Art” generation\nDecision-making\n\n“Who is responsible for…”"
  },
  {
    "objectID": "4511/notes/01/01.html#what-this-course-is-not-about",
    "href": "4511/notes/01/01.html#what-this-course-is-not-about",
    "title": "AI Algorithms  Introduction",
    "section": "What This Course Is Not About",
    "text": "What This Course Is Not About\n\nTranslation\nText generation\n“Art” generation"
  },
  {
    "objectID": "4511/notes/01/01.html#what-this-course-is-about",
    "href": "4511/notes/01/01.html#what-this-course-is-about",
    "title": "AI Algorithms  Introduction",
    "section": "What This Course Is About",
    "text": "What This Course Is About\n\nThe design of rational agents\nGeneral AI techniques for problem solving\n\nRecognizing when a new problem has an “existing” solution\n\nSolving problems approximately\n\nOptimal solutions often intractable"
  },
  {
    "objectID": "4511/notes/01/01.html#the-rational-agent",
    "href": "4511/notes/01/01.html#the-rational-agent",
    "title": "AI Algorithms  Introduction",
    "section": "The Rational Agent",
    "text": "The Rational Agent\n\nHas a utility function\n\nMaximizes expected utility\n\nSensors: perceives environment\nActuators: influences environment\n\nWhat is in between sensors and actuators?\nThe agent function."
  },
  {
    "objectID": "4511/notes/01/01.html#reflex-agent",
    "href": "4511/notes/01/01.html#reflex-agent",
    "title": "AI Algorithms  Introduction",
    "section": "Reflex Agent",
    "text": "Reflex Agent\n\n\n\nVery basic form of agent function\nPercept \\(\\rightarrow\\) Action lookup table\nGood for simple games\n\nTic-tac-toe\nCheckers?\n\nNeeds entire state space in table"
  },
  {
    "objectID": "4511/notes/01/01.html#state-space-size",
    "href": "4511/notes/01/01.html#state-space-size",
    "title": "AI Algorithms  Introduction",
    "section": "State Space Size",
    "text": "State Space Size\n\n\n\nTic-tac-toe: \\(10^3\\)\nCheckers: \\(10^{20}\\)\nChess: \\(10^{44}\\)\nGo: \\(10^{170}\\)\nSelf-driving car: ?"
  },
  {
    "objectID": "4511/notes/01/01.html#partially-observable-state",
    "href": "4511/notes/01/01.html#partially-observable-state",
    "title": "AI Algorithms  Introduction",
    "section": "Partially-Observable State",
    "text": "Partially-Observable State"
  },
  {
    "objectID": "4511/notes/01/01.html#partially-observable-state-1",
    "href": "4511/notes/01/01.html#partially-observable-state-1",
    "title": "AI Algorithms  Introduction",
    "section": "Partially-Observable State",
    "text": "Partially-Observable State\n\nMost real-world problems\n\nSensor error\nModel error\n\nReflex agents fail1\nAgent needs a belief state\n\nUnless total number of partial observations is bounded"
  },
  {
    "objectID": "4511/notes/01/01.html#backing-up",
    "href": "4511/notes/01/01.html#backing-up",
    "title": "AI Algorithms  Introduction",
    "section": "Backing Up",
    "text": "Backing Up\n\nThe Environment\n\nState Space\n\nRational Agents:\n\nSensors\nActuators\n\nSensors + State Space = Belief State\n\nFeatures of the problem are pre-defined; we define the agent function."
  },
  {
    "objectID": "4511/notes/01/01.html#high-level-topics",
    "href": "4511/notes/01/01.html#high-level-topics",
    "title": "AI Algorithms  Introduction",
    "section": "High-Level Topics",
    "text": "High-Level Topics\n\nSearch & Planning\nMulti-Agent Problems\nProbability & Inference\nLearning"
  },
  {
    "objectID": "4511/notes/01/01.html#search-planning",
    "href": "4511/notes/01/01.html#search-planning",
    "title": "AI Algorithms  Introduction",
    "section": "Search & Planning",
    "text": "Search & Planning\n\nWorld model\n\n“Fully known”\n\nHow do we accomplish a goal?"
  },
  {
    "objectID": "4511/notes/01/01.html#multi-agent-problems",
    "href": "4511/notes/01/01.html#multi-agent-problems",
    "title": "AI Algorithms  Introduction",
    "section": "Multi-Agent Problems",
    "text": "Multi-Agent Problems\n\nOther agents with different utility functions\nAgents react to our agent\nHow do we maximize our own utility?"
  },
  {
    "objectID": "4511/notes/01/01.html#probability-inference",
    "href": "4511/notes/01/01.html#probability-inference",
    "title": "AI Algorithms  Introduction",
    "section": "Probability & Inference",
    "text": "Probability & Inference\n\nPartially-observed states\nStochastic actions\nHow do we maintain a belief state?\nHow do we maximize our utility?"
  },
  {
    "objectID": "4511/notes/01/01.html#learning",
    "href": "4511/notes/01/01.html#learning",
    "title": "AI Algorithms  Introduction",
    "section": "Learning",
    "text": "Learning\n\nInitially-unknown problem structure\nExplore vs. exploit\n\nActions tell us more about the problem\nActions have some cost\n\nCan also learn from data"
  },
  {
    "objectID": "4511/notes/01/01.html#big-picture",
    "href": "4511/notes/01/01.html#big-picture",
    "title": "AI Algorithms  Introduction",
    "section": "Big Picture",
    "text": "Big Picture\n\nRepresent problems\n\nStates, actions\n\nImplement algorithms\nTrain (if needed) using data"
  },
  {
    "objectID": "4511/notes/01/01.html#the-pac-man",
    "href": "4511/notes/01/01.html#the-pac-man",
    "title": "AI Algorithms  Introduction",
    "section": "The Pac-Man",
    "text": "The Pac-Man\n\n\nNote that Bandai Namco Entertainment Inc. owns the trademark to “PAC-MAN” for Coin and Non-Coin Operated Electronic Amusement Apparatus for Playing a Game on a Video Output Display, as well as for Entertainment, namely providing a computer game that may be accessed network-wide by network users via mobile phones and computers; providing computer games via network between communications networks and computers. Our use is educational."
  },
  {
    "objectID": "4511/notes/01/01.html#why-pac-man",
    "href": "4511/notes/01/01.html#why-pac-man",
    "title": "AI Algorithms  Introduction",
    "section": "Why Pac-Man?",
    "text": "Why Pac-Man?\n\nReal world AI problems are hard\n\nThis is a one-semester course\n\nAlgorithms themselves are reasonably simple\n\nApplying them to problems is “the” problem\n\nPac-man is simple\nYou don’t have to like games\n\nSame algorithms apply to real world"
  },
  {
    "objectID": "4511/notes/01/01.html#the-real-world",
    "href": "4511/notes/01/01.html#the-real-world",
    "title": "AI Algorithms  Introduction",
    "section": "The Real World",
    "text": "The Real World\n\nObservable?\nDeterministic?\nMarkov?\nStatic?\nDiscrete?\n\nExamples…"
  },
  {
    "objectID": "4511/notes/01/01.html#references",
    "href": "4511/notes/01/01.html#references",
    "title": "AI Algorithms  Introduction",
    "section": "References",
    "text": "References\n\nStuart J. Russell and Peter Norvig. Artificial Intelligence: A Modern Approach. 4th Edition, 2020.\nStanford CS231\nUC Berkeley CS188"
  },
  {
    "objectID": "4511/syllabus.html",
    "href": "4511/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "4 February 2025\n\n\n\n\n\n4 Feb: Added TA Office Hours\n17 Jan: Typographical error in “conduct” section\n8 Jan: Original version of syllabus."
  },
  {
    "objectID": "4511/syllabus.html#scope",
    "href": "4511/syllabus.html#scope",
    "title": "Syllabus",
    "section": "Scope",
    "text": "Scope\nRepresentation and space search; heuristic search; predicate calculus; knowledge representation and knowledge engineering for expert systems; rule-based, hybrid, and O-O systems; semantic nets, frames, and natural language; theorem provers; planning, learning, neural nets; use of AI languages. Knowledge representation and reasoning, propositional logic and predicate calculus. Logic programming; search, game trees, backtracking; planning."
  },
  {
    "objectID": "4511/syllabus.html#prerequisites",
    "href": "4511/syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\n4511: CSCI 3212\n6511: CSCI 6212\nUndergraduate-level proficiency in object-oriented programming is assumed. Linear algebra and probability are useful, but fundamentals will be reviewed. Python is the programming language for this course."
  },
  {
    "objectID": "4511/syllabus.html#course-learning-outcomes",
    "href": "4511/syllabus.html#course-learning-outcomes",
    "title": "Syllabus",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDemonstrate theoretical understanding of the design of decision-making software agents\nDescribe tractability of decision-making algorithms\nExpress decision problems as probability (Markov) models\nImplement decision-making agents for solving problems in continuous and discrete state spaces"
  },
  {
    "objectID": "4511/syllabus.html#required-textbook",
    "href": "4511/syllabus.html#required-textbook",
    "title": "Syllabus",
    "section": "Required Textbook",
    "text": "Required Textbook\nStuart J. Russell and Peter Norvig. Artificial Intelligence : A Modern Approach. 4th edition, Pearson, 2020.1\n1 Several copes of this book will be on hold at the GWU Library. The international edition, which is much cheaper than the US edition, has the same contents."
  },
  {
    "objectID": "4511/syllabus.html#supplemental-textbooks",
    "href": "4511/syllabus.html#supplemental-textbooks",
    "title": "Syllabus",
    "section": "Supplemental Textbooks",
    "text": "Supplemental Textbooks\nMykel J. Kochenderfer, Tim A. Wheeler, and Kyle H. Wray. Algorithms for Decision Making MIT Press, 2022\nRichard S. Sutton and Andrew G. Barto. Reinforcement Learning: An Introduction MIT Press, 2018"
  },
  {
    "objectID": "4511/syllabus.html#instructor",
    "href": "4511/syllabus.html#instructor",
    "title": "Syllabus",
    "section": "Instructor",
    "text": "Instructor\n\nProf. Joseph Goldfrank joe.goldfrank@gwu.edu"
  },
  {
    "objectID": "4511/syllabus.html#office-hours",
    "href": "4511/syllabus.html#office-hours",
    "title": "Syllabus",
    "section": "Office Hours",
    "text": "Office Hours\nM/W/F Afternoons: Detailed Schedule\nTA Office Hours (Rhys): Wednesdays 10AM - Noon\n\nGrading Server & Autograding\nThis course will use the GWU Computer Science grading and submission server. You will receive test cases to run your code against at home. If you pass the test cases at home, you will pass them when I grade your work."
  },
  {
    "objectID": "4511/syllabus.html#schedule",
    "href": "4511/syllabus.html#schedule",
    "title": "Syllabus",
    "section": "Schedule",
    "text": "Schedule\nReadings are from Russell & Norvig unless otherwise noted.\n\n\n\nDate\nSubject\nReading\nAssessments (Due)\n\n\n\n\n17 Jan\nRational Agents, Python\nCh. 2; Python Docs 4 and 9\n\n\n\n24 Jan\nSearch & Heuristics\nCh. 3, 4\n\n\n\n31 Jan\nGames\nCh. 5\n\n\n\n7 Feb\nCSPs\nCh. 6\nHW 1 (7 Feb)\n\n\n14 Feb\nLogic\nCh. 7\n\n\n\n21 Feb\nProbability & Linear Algebra Review\nCh. 13\nHW 2 (21 Feb)\n\n\n28 Feb\nUtility Theory & Exam Review\nCh. 16\n\n\n\n7 Mar\nMidterm Examination\n\nHW 3 (3 Mar)\n\n\n14 Mar\nSpring Break\n\n\n\n\n21 Mar\nState Uncertainty\nKochenderfer Ch. 19\n\n\n\n28 Mar\nMarkov Decision Processes\nCh. 17\n\n\n\n4 Apr\nPartially-Observable MDPs\nKochenderfer Ch. 20, 9.6\nHW 4 (4 Apr)\n\n\n11 Apr\nReinforcement Learning\nCh. 22\nProject Scope (6 Apr)\n\n\n18 Apr\nExam Review\n\nProject Milestone 1 (18 Apr)\n\n\n25 Apr\nFinal Examination\n\nProject Milestone 2 (25 Apr)\n\n\n6 May\n(No Scheduled Lecture)\n\nProject Due\n\n\n\n\nThis schedule of topics is approximate and I may deviate from it. No homework assignment will be released with less than two weeks’ time to complete it. No due dates will be made earlier. No exams will be rescheduled unless required by the University."
  },
  {
    "objectID": "4511/syllabus.html#examinations-assessments",
    "href": "4511/syllabus.html#examinations-assessments",
    "title": "Syllabus",
    "section": "Examinations & Assessments",
    "text": "Examinations & Assessments\nThere will be four homework assignments, one project, one midterm exam, and one final exam. You must acknowledge the schedule of deliverables and agree to be present for both exams as part of the first homework assignment.\nThere may be extra credit opportunities in addition to what is listed here, some of which will be offered during class meetings. Any work you turn in for credit may be present on examinations."
  },
  {
    "objectID": "4511/syllabus.html#grading",
    "href": "4511/syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\nThe final exam grade replaces the midterm exam grade, if the final exam grade is higher\nThe lowest homework is weighted 50% (i.e., it will be worth less than the other homework assignments).\n\n\nGrading Scale\nA numerical average will be calculated as follows:\n\nHomework: 40%\nProject: 20%\nExams: 40%\n\nThe following grading scale will be applied at the end of the semester to calculate letter grades:\n\n\n\nNumerical Average\nLetter Grade\n\n\n\n\n90-100\nA\n\n\n85-89\nA-\n\n\n80-84\nB+\n\n\n75-79\nB\n\n\n70-74\nB-\n\n\n65-69\nC+\n\n\n60-64\nC\n\n\n55-59\nC-\n\n\n45-54\nD\n\n\n0-44\nF\n\n\n\nGrades are rounded to the nearest integer, e.g., 0.4 rounds to 0 and 0.5 rounds to 1. Grades of D are only for CSCI 4511. Any grade \\(\\leq\\) 54 in CSCI 6511 is an F."
  },
  {
    "objectID": "4511/syllabus.html#conduct",
    "href": "4511/syllabus.html#conduct",
    "title": "Syllabus",
    "section": "Conduct",
    "text": "Conduct\nCredit (up to 10% of your final grade) can be lost for actions that disrespect other students, such as being disruptive in class, asking for complete solutions during office hours, or requesting grading accommodations other than those outlined in this syllabus.\nThe environment of this class will be respectful of age, race, ethnicity, country of origin, language, religion, spiritual practice, sexual orientation, gender identity or expression, introversion/extroversion personality dimensions, and socioeconomic and mental/physical status. I am committed to supporting all members of the class in fostering a respectful, charitable, and professional academic environment. You must also do your part to make this course inclusive."
  },
  {
    "objectID": "4511/syllabus.html#late-work",
    "href": "4511/syllabus.html#late-work",
    "title": "Syllabus",
    "section": "Late Work",
    "text": "Late Work\nLate work is not accepted, with the following exceptions:\n\nEach student will have eight “late days” to use on homework assignments. No more than three days can be used on any one assignment. These late days intentionally accommodate both time management difficulties and brief illnesses. I recommend saving a few late days for brief unexpected disruptions in your schedule. You can’t use late days for the project.\nExtensions will be granted should there arise circumstances beyond your control that substantially impede your ability to complete coursework. Notify me as soon as feasible in these cases. Examples of such circumstances include (but are not limited to) long-term illness and loss of housing. I will request documentation of such circumstances through your dean."
  },
  {
    "objectID": "4511/syllabus.html#attendance",
    "href": "4511/syllabus.html#attendance",
    "title": "Syllabus",
    "section": "Attendance",
    "text": "Attendance\nI do not take attendance, but I strongly encourage you to attend. Lectures will not be videorecorded or audiorecorded, but lecture notes will be published. You are responsible for knowing the content of each lecture.\nFor long-term disruptions in schedule such as serious illness or loss of housing, I will make accommodations after being provided with documentation through the Office of Student Support or from your Dean. For illnesses impacting exams, I will also require such documentation.\nAbsence to represent GWU in an official capacity (such as at an athletic event) is always excused, however such excused absence will require confirmation from a faculty sponsor or athletic official, and must be arranged in advance."
  },
  {
    "objectID": "4511/syllabus.html#time-commitment",
    "href": "4511/syllabus.html#time-commitment",
    "title": "Syllabus",
    "section": "Time Commitment",
    "text": "Time Commitment\nThere is one 150-minute class meeting per week. Students are expected to spend at least 5 hours per week independently learning outside of class meetings for this course. As preparation level for this course varies. It is possible that you will need to commit substantially more– or substantially less– than 5 hours per week."
  },
  {
    "objectID": "4511/syllabus.html#collaboration-policy",
    "href": "4511/syllabus.html#collaboration-policy",
    "title": "Syllabus",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\nWrite your own solutions to homework assignments by yourself. You must acknowledge any discussions you had with others in your writeup for each homework. Don’t let other people copy your solutions, and don’t copy solutions from other people, from websites, or from other sources.\nThe challenge from this course is largely in understanding how decision-making algorithms work and how/when to apply them to problems. Discussing these concepts with others is always permitted, and is strongly encouraged. Likewise, helping a peer resolve a bug is permitted.\nIf you feel like a discussion with any person (including the professor) helped you answer a homework problem, include their name(s) in your comments at the start of that problem, and near the part you got help on. In the event your collaboration exceeds what is permitted, any penalty will be substantially reduced (or waived) if such a thing is an honest mistake as evidenced by these comments. If you aren’t sure: ask.\nIf I discover at any point during or after the semester that you have violated the collaboration policy, you will be formally referred to the Office of Student Rights and Responsibilities for Academic Dishonesty. In addition to failing the assignment, your final grade in the class will be reduced by a full letter grade. This policy is not a game. Do not attempt to circumvent it.\n\nGenerative Artificial Intelligence / Large Language Models\nCopying solutions for homework assignments from an AI assistant or Large Language Model such as (but not limited to) ChatGPT, Copilot, or Claude will be treated the same as copying it from another person or from any other online resource. It is not permitted on any homework assignment, and it is considered cheating.\n\n\nYou Can Search Your Errors\nCopying code snippets from Stack Overflow, language documentation, or similar is permitted, however please indicate when you have done this with a comment in your code citing the resource. If you have become accustomed to using LLMs for these searches, I expect you to verify the answers with language/library documentation and cite the documentation.\n\n\n\n\n\n\n\nUniversity Policies\n\n\n\n\n\n\nAcademic Integrity Code\nAcademic integrity is an essential part of the educational process, and all members of the GW community take these matters very seriously. As the instructor of record for this course, my role is to provide clear expectations and uphold them in all assessments. Violations of academic integrity occur when students fail to cite research sources properly, engage in unauthorized collaboration, falsify data, and otherwise violate the Code of Academic Integrity. If you have any questions about whether or not particular academic practices or resources are permitted, you should ask me for clarification. If you are reported for an academic integrity violation, you should contact the Office of Student Rights and Responsibilities (SRR) to learn more about your rights and options in the process. Consequences can range from failure of assignment to expulsion from the university and may include a transcript notation. For more information, please refer to the SRR website, email rights@gwu.edu, or call 202-994-6757.\n\n\nUniversity Policy on Observance of Religious Holidays\nStudents must notify faculty during the first week of the semester in which they are enrolled in the course, or as early as possible, but no later than three weeks prior to the absence, of their intention to be absent from class on their day(s) of religious observance. If the holiday falls within the first three weeks of class, the student must inform faculty in the first week of the semester. For details and policy, see “Religious Holidays” at Provost Policies, Procedures, and Guidelines.\n\n\nUse of Electronic Course Materials and Class Recordings\nStudents are encouraged to use electronic course materials, including recorded class sessions, for private personal use in connection with their academic program of study. Electronic course materials and recorded class sessions should not be shared or used for non-course related purposes unless express permission has been granted by the instructor. Students who impermissibly share any electronic course materials are subject to discipline under the Student Code of Conduct. Please contact the instructor if you have questions regarding what constitutes permissible or impermissible use of electronic course materials and/or recorded class sessions. Please contact Disability Support Services at https://disabilitysupport.gwu.edu if you have questions or need assistance in accessing electronic course materials.\n\n\nAcademic Support\n\nWriting Center\nGW’s Writing Center cultivates confident writers in the University community by facilitating collaborative, critical, and inclusive conversations at all stages of the writing process. Working alongside peer mentors, writers develop strategies to write independently in academic and public settings. Appointments can be booked online at https://gwu.mywconline.\n\n\nAcademic Commons\nAcademic Commons provides tutoring and other academic support resources to students in many courses. Students can schedule virtual one-on-one appointments or attend virtual drop-in sessions. Students may schedule an appointment, review the tutoring schedule, access other academic support resources, or obtain assistance at https://academiccommons.gwu.edu.\n\n\n\nSupport for Students Outside the Classroom\n\nDisability Support Services (DSS)\nTelephone: 202-994-8250\nAny student who may need an accommodation based on the potential impact of a disability should contact Disability Support Services to establish eligibility and to coordinate reasonable accommodations.\n\n\nCounseling and Psychological Services\nTelephone: 202-994-5300\nGW’s Colonial Health Center offers counseling and psychological services, supporting mental health and personal development by collaborating directly with students to overcome challenges and difficulties that may interfere with academic, emotional, and personal success.\n\n\nSafety and Security\n\nMonitor GW Alerts and Campus Advisories to Stay Informed before and during an emergency event or situation\nIn an emergency: call 911 or GWPD/EMeRG 202-994-6111\nFor situation-specific actions: refer to GW’s Emergency Response Handbook and Emergency Operations Plan\nIn the event of an armed intruder: Run. Hide. Fight."
  },
  {
    "objectID": "4511/syllabus.html#academic-integrity-code",
    "href": "4511/syllabus.html#academic-integrity-code",
    "title": "Syllabus",
    "section": "Academic Integrity Code",
    "text": "Academic Integrity Code\nAcademic integrity is an essential part of the educational process, and all members of the GW community take these matters very seriously. As the instructor of record for this course, my role is to provide clear expectations and uphold them in all assessments. Violations of academic integrity occur when students fail to cite research sources properly, engage in unauthorized collaboration, falsify data, and otherwise violate the Code of Academic Integrity. If you have any questions about whether or not particular academic practices or resources are permitted, you should ask me for clarification. If you are reported for an academic integrity violation, you should contact the Office of Student Rights and Responsibilities (SRR) to learn more about your rights and options in the process. Consequences can range from failure of assignment to expulsion from the university and may include a transcript notation. For more information, please refer to the SRR website, email rights@gwu.edu, or call 202-994-6757."
  },
  {
    "objectID": "4511/syllabus.html#university-policy-on-observance-of-religious-holidays",
    "href": "4511/syllabus.html#university-policy-on-observance-of-religious-holidays",
    "title": "Syllabus",
    "section": "University Policy on Observance of Religious Holidays",
    "text": "University Policy on Observance of Religious Holidays\nStudents must notify faculty during the first week of the semester in which they are enrolled in the course, or as early as possible, but no later than three weeks prior to the absence, of their intention to be absent from class on their day(s) of religious observance. If the holiday falls within the first three weeks of class, the student must inform faculty in the first week of the semester. For details and policy, see “Religious Holidays” at Provost Policies, Procedures, and Guidelines."
  },
  {
    "objectID": "4511/syllabus.html#use-of-electronic-course-materials-and-class-recordings",
    "href": "4511/syllabus.html#use-of-electronic-course-materials-and-class-recordings",
    "title": "Syllabus",
    "section": "Use of Electronic Course Materials and Class Recordings",
    "text": "Use of Electronic Course Materials and Class Recordings\nStudents are encouraged to use electronic course materials, including recorded class sessions, for private personal use in connection with their academic program of study. Electronic course materials and recorded class sessions should not be shared or used for non-course related purposes unless express permission has been granted by the instructor. Students who impermissibly share any electronic course materials are subject to discipline under the Student Code of Conduct. Please contact the instructor if you have questions regarding what constitutes permissible or impermissible use of electronic course materials and/or recorded class sessions. Please contact Disability Support Services at https://disabilitysupport.gwu.edu if you have questions or need assistance in accessing electronic course materials."
  },
  {
    "objectID": "4511/syllabus.html#writing-center",
    "href": "4511/syllabus.html#writing-center",
    "title": "Syllabus",
    "section": "Writing Center",
    "text": "Writing Center\nGW’s Writing Center cultivates confident writers in the University community by facilitating collaborative, critical, and inclusive conversations at all stages of the writing process. Working alongside peer mentors, writers develop strategies to write independently in academic and public settings. Appointments can be booked online at https://gwu.mywconline."
  },
  {
    "objectID": "4511/syllabus.html#academic-commons",
    "href": "4511/syllabus.html#academic-commons",
    "title": "Syllabus",
    "section": "Academic Commons",
    "text": "Academic Commons\nAcademic Commons provides tutoring and other academic support resources to students in many courses. Students can schedule virtual one-on-one appointments or attend virtual drop-in sessions. Students may schedule an appointment, review the tutoring schedule, access other academic support resources, or obtain assistance at https://academiccommons.gwu.edu."
  },
  {
    "objectID": "4511/syllabus.html#disability-support-services-dss",
    "href": "4511/syllabus.html#disability-support-services-dss",
    "title": "Syllabus",
    "section": "Disability Support Services (DSS)",
    "text": "Disability Support Services (DSS)\nTelephone: 202-994-8250\nAny student who may need an accommodation based on the potential impact of a disability should contact Disability Support Services to establish eligibility and to coordinate reasonable accommodations."
  },
  {
    "objectID": "4511/syllabus.html#counseling-and-psychological-services",
    "href": "4511/syllabus.html#counseling-and-psychological-services",
    "title": "Syllabus",
    "section": "Counseling and Psychological Services",
    "text": "Counseling and Psychological Services\nTelephone: 202-994-5300\nGW’s Colonial Health Center offers counseling and psychological services, supporting mental health and personal development by collaborating directly with students to overcome challenges and difficulties that may interfere with academic, emotional, and personal success."
  },
  {
    "objectID": "4511/syllabus.html#safety-and-security",
    "href": "4511/syllabus.html#safety-and-security",
    "title": "Syllabus",
    "section": "Safety and Security",
    "text": "Safety and Security\n\nMonitor GW Alerts and Campus Advisories to Stay Informed before and during an emergency event or situation\nIn an emergency: call 911 or GWPD/EMeRG 202-994-6111\nFor situation-specific actions: refer to GW’s Emergency Response Handbook and Emergency Operations Plan\nIn the event of an armed intruder: Run. Hide. Fight."
  },
  {
    "objectID": "4511/hw/hw1.html",
    "href": "4511/hw/hw1.html",
    "title": "Homework One",
    "section": "",
    "text": "Read the entire syllabus and write me a short note acknowledging that you did this. Specifically acknowledge the schedule of deliverables and exams, the readings, and the collaboration policy. Let me know how prepared you feel to take the course. Include this document as a PDF in your homework submission."
  },
  {
    "objectID": "4511/hw/hw1.html#syllabus-acknowledgement",
    "href": "4511/hw/hw1.html#syllabus-acknowledgement",
    "title": "Homework One",
    "section": "",
    "text": "Read the entire syllabus and write me a short note acknowledging that you did this. Specifically acknowledge the schedule of deliverables and exams, the readings, and the collaboration policy. Let me know how prepared you feel to take the course. Include this document as a PDF in your homework submission."
  },
  {
    "objectID": "4511/hw/hw1.html#introduction",
    "href": "4511/hw/hw1.html#introduction",
    "title": "Homework One",
    "section": "2 Introduction",
    "text": "2 Introduction\nIn this project, your Pacman agent will find paths through his maze world, both to reach a particular location and to collect food efficiently. You will build general search algorithms and apply them to Pacman scenarios.\nThis project includes an autograder for you to grade your answers locally. This can be run with the command:\npython autograder.py\nThe code for this project consists of several Python files, some of which you will need to read and understand in order to complete the assignment, and some of which you can ignore. You can download all the code and supporting files in: search dot zip.\nFiles to Edit and Submit: You will fill in portions of search.py and searchAgents.py during the assignment. Once you have completed the assignment, you will submit these files to the submit server. Please submit a single (uncompressed) .tar containing these two files and your syllabus acknowledgement PDF. Include a comment at the start of searchAgents.py indicating what help, if any, you got on this assignment. If you didn’t get any help, indicate this. Failure to include this comment will result in losing 10 points on the assignment grade.\nEvaluation: Evaluation of your code’s correctness will be performed by the autograder. If you think your code is correct and the autograder is in error, bring this to my attention before the submission deadline. Point values are relative within each assignment: all assignments are scaled to 100 when calculating grades. The server will allow you to submit multiple times for credit, but please run the autograder locally first.\nAcademic Dishonesty: This assignment is individual effort. Please review the collaboration policy for the course and adhere to it.\n\n\n\n\n\n\n\n\nFiles you’ll edit:\n\n\n\nsearch.py\nWhere all of your search algorithms will reside.\n\n\nsearchAgents.py\nWhere all of your search-based agents will reside.\n\n\nFiles you might want to look at:\n\n\n\npacman.py\nThe main file that runs Pacman games. This file describes a Pacman GameState type, which you use in this project.\n\n\ngame.py\nThe logic behind how the Pacman world works. This file describes several supporting types like AgentState, Agent, Direction, and Grid.\n\n\nutil.py\nUseful data structures for implementing search algorithms.\n\n\nYou can ignore other supporting files."
  },
  {
    "objectID": "4511/hw/hw1.html#welcome-to-pacman",
    "href": "4511/hw/hw1.html#welcome-to-pacman",
    "title": "Homework One",
    "section": "3 Welcome to Pacman",
    "text": "3 Welcome to Pacman\nAfter downloading the code, unzipping it, and changing to the directory, you should be able to play a game of Pacman by typing the following at the command line:\npython pacman.py\nPacman lives in a shiny blue world of twisting corridors and tasty round treats. Navigating this world efficiently will be Pacman’s first step in mastering his domain.\nThe simplest agent in searchAgents.py is called the GoWestAgent, which always goes West (a trivial reflex agent). This agent can occasionally win:\npython pacman.py --layout testMaze --pacman GoWestAgent\nBut, things get ugly for this agent when turning is required:\npython pacman.py --layout tinyMaze --pacman GoWestAgent\nIf Pacman gets stuck, you can exit the game by typing CTRL+C into your terminal.\nSoon, your agent will solve not only tinyMaze, but any maze you want.\nNote that pacman.py supports a number of options that can each be expressed in a long way (e.g., --layout) or a short way (e.g., -l). You can see the list of all options and their default values via:\npython pacman.py -h"
  },
  {
    "objectID": "4511/hw/hw1.html#q1-3-pts-depth-first-search",
    "href": "4511/hw/hw1.html#q1-3-pts-depth-first-search",
    "title": "Homework One",
    "section": "4 Q1 (3 pts): Depth First Search",
    "text": "4 Q1 (3 pts): Depth First Search\n(3 pts) In searchAgents.py, you’ll find a fully implemented SearchAgent, which plans out a path through Pacman’s world and then executes that path step-by-step. The search algorithms for formulating a plan are not implemented – that’s your job.\nFirst, test that the SearchAgent is working correctly by running:\npython pacman.py -l tinyMaze -p SearchAgent -a fn=tinyMazeSearch\nThe command above tells the SearchAgent to use tinyMazeSearch as its search algorithm, which is implemented in search.py. Pacman should navigate the maze successfully.\nNow it’s time to write full-fledged generic search functions to help Pacman plan routes! Pseudocode for the search algorithms you’ll write can be found in the lecture slides. Remember that a search node must contain not only a state but also the information necessary to reconstruct the path (plan) which gets to that state.\nImportant note: All of your search functions need to return a list of actions that will lead the agent from the start to the goal. These actions all have to be legal moves (valid directions, no moving through walls).\nImportant note: Make sure to use the Stack, Queue and PriorityQueue data structures provided to you in util.py! These data structure implementations have particular properties which are required for compatibility with the autograder.\nHint: Each algorithm is very similar. Algorithms for DFS, BFS, UCS, and A* differ only in the details of how the fringe is managed. So, concentrate on getting DFS right and the rest should be relatively straightforward. Indeed, one possible implementation requires only a single generic search method which is configured with an algorithm-specific queuing strategy. (Your implementation need not be of this form to receive full credit).\nImplement the depth-first search (DFS) algorithm in the depthFirstSearch function in search.py. To make your algorithm complete, write the graph search version of DFS, which avoids expanding any already visited states.\nYour code should quickly find a solution for:\npython pacman.py -l tinyMaze -p SearchAgent\npython pacman.py -l mediumMaze -p SearchAgent\npython pacman.py -l bigMaze -z .5 -p SearchAgent\nThe Pacman board will show an overlay of the states explored, and the order in which they were explored (brighter red means earlier exploration). Is the exploration order what you would have expected? Does Pacman actually go to all the explored squares on his way to the goal?\nHint: If you use a Stack as your data structure, the solution found by your DFS algorithm for mediumMaze should have a length of 130 (provided you push successors onto the fringe in the order provided by getSuccessors; you might get 246 if you push them in the reverse order). Is this a least cost solution? If not, think about what depth-first search is doing wrong.\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q1"
  },
  {
    "objectID": "4511/hw/hw1.html#q2-3-pts-breadth-first-search",
    "href": "4511/hw/hw1.html#q2-3-pts-breadth-first-search",
    "title": "Homework One",
    "section": "5 Q2 (3 pts): Breadth First Search",
    "text": "5 Q2 (3 pts): Breadth First Search\nImplement the breadth-first search (BFS) algorithm in the breadthFirstSearch function in search.py. Again, write a graph search algorithm that avoids expanding any already visited states. Test your code the same way you did for depth-first search.\npython pacman.py -l mediumMaze -p SearchAgent -a fn=bfs\npython pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5\nDoes BFS find a least cost solution? If not, check your implementation.\nHint: If Pacman moves too slowly for you, try the option –frameTime 0.\nNote: If you’ve written your search code generically, your code should work equally well for the eight-puzzle search problem without any changes.\npython eightpuzzle.py\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q2"
  },
  {
    "objectID": "4511/hw/hw1.html#q3-3-pts-varying-the-cost-function",
    "href": "4511/hw/hw1.html#q3-3-pts-varying-the-cost-function",
    "title": "Homework One",
    "section": "6 Q3 (3 pts): Varying the Cost Function",
    "text": "6 Q3 (3 pts): Varying the Cost Function\nWhile BFS will find a fewest-actions path to the goal, we might want to find paths that are “best” in other senses. Consider mediumDottedMaze and mediumScaryMaze.\nBy changing the cost function, we can encourage Pacman to find different paths. For example, we can charge more for dangerous steps in ghost-ridden areas or less for steps in food-rich areas, and a rational Pacman agent should adjust its behavior in response.\nImplement the uniform-cost graph search algorithm in the uniformCostSearch function in search.py. We encourage you to look through util.py for some data structures that may be useful in your implementation. You should now observe successful behavior in all three of the following layouts, where the agents below are all UCS agents that differ only in the cost function they use (the agents and cost functions are written for you):\npython pacman.py -l mediumMaze -p SearchAgent -a fn=ucs\npython pacman.py -l mediumDottedMaze -p StayEastSearchAgent\npython pacman.py -l mediumScaryMaze -p StayWestSearchAgent\nNote: You should get very low and very high path costs for the StayEastSearchAgent and StayWestSearchAgent respectively, due to their exponential cost functions (see searchAgents.py for details).\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q3"
  },
  {
    "objectID": "4511/hw/hw1.html#q4-3-pts-a-search",
    "href": "4511/hw/hw1.html#q4-3-pts-a-search",
    "title": "Homework One",
    "section": "7 Q4 (3 pts): A* search",
    "text": "7 Q4 (3 pts): A* search\nImplement A* graph search in the empty function aStarSearch in search.py. A* takes a heuristic function as an argument. Heuristics take two arguments: a state in the search problem (the main argument), and the problem itself (for reference information). The nullHeuristic heuristic function in search.py is a trivial example.\nYou can test your A* implementation on the original problem of finding a path through a maze to a fixed position using the Manhattan distance heuristic (implemented already as manhattanHeuristic in searchAgents.py).\npython pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic\nYou should see that A* finds the optimal solution slightly faster than uniform cost search (about 549 vs. 620 search nodes expanded in our implementation, but ties in priority may make your numbers differ slightly). What happens on openMaze for the various search strategies?\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q4"
  },
  {
    "objectID": "4511/hw/hw1.html#q5-3-pts-finding-all-the-corners",
    "href": "4511/hw/hw1.html#q5-3-pts-finding-all-the-corners",
    "title": "Homework One",
    "section": "8 Q5 (3 pts): Finding All the Corners",
    "text": "8 Q5 (3 pts): Finding All the Corners\nThe real power of A* will only be apparent with a more challenging search problem. Now, it’s time to formulate a new problem and design a heuristic for it.\nIn corner mazes, there are four dots, one in each corner. Our new search problem is to find the shortest path through the maze that touches all four corners (whether the maze actually has food there or not). Note that for some mazes like tinyCorners, the shortest path does not always go to the closest food first! Hint: the shortest path through tinyCorners takes 28 steps.\nNote: Make sure to complete Question 2 before working on Question 5, because Question 5 builds upon your answer for Question 2.\nImplement the CornersProblem search problem in searchAgents.py. You will need to choose a state representation that encodes all the information necessary to detect whether all four corners have been reached. Now, your search agent should solve:\npython pacman.py -l tinyCorners -p SearchAgent -a fn=bfs,prob=CornersProblem\npython pacman.py -l mediumCorners -p SearchAgent -a fn=bfs,prob=CornersProblem\nTo receive full credit, you need to define an abstract state representation that does not encode irrelevant information (like the position of ghosts, where extra food is, etc.). In particular, do not use a Pacman GameState as a search state. Your code will be very, very slow if you do (and also wrong).\nAn instance of the CornersProblem class represents an entire search problem, not a particular state. Particular states are returned by the functions you write, and your functions return a data structure of your choosing (e.g. tuple, set, etc.) that represents a state.\nFurthermore, while a program is running, remember that many states simultaneously exist, all on the queue of the search algorithm, and they should be independent of each other. In other words, you should not have only one state for the entire CornersProblem object; your class should be able to generate many different states to provide to the search algorithm.\nHint 1: The only parts of the game state you need to reference in your implementation are the starting Pacman position and the location of the four corners.\nHint 2: When coding up getSuccessors, make sure to add children to your successors list with a cost of 1.\nOur implementation of breadthFirstSearch expands just under 2000 search nodes on mediumCorners. However, heuristics (used with A* search) can reduce the amount of searching required.\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q5\n\n\n\n\n\n\n\nHeuristics\n\n\n\nIt’s possible to code a “heuristic” that finds actual path cost using DFS, BFS, or UCS, and doesn’t count those nodes as expansions for the autograder. Please don’t do this. You won’t get credit, even if you initially pass the autograder."
  },
  {
    "objectID": "4511/hw/hw1.html#q6-3-pts-corners-problem-heuristic",
    "href": "4511/hw/hw1.html#q6-3-pts-corners-problem-heuristic",
    "title": "Homework One",
    "section": "9 Q6 (3 pts): Corners Problem: Heuristic",
    "text": "9 Q6 (3 pts): Corners Problem: Heuristic\nNote: Make sure to complete Question 4 before working on Question 6, because Question 6 builds upon your answer for Question 4.\nImplement a non-trivial, consistent heuristic for the CornersProblem in cornersHeuristic.\npython pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5\nNote: AStarCornersAgent is a shortcut for\n-p SearchAgent -a fn=aStarSearch,prob=CornersProblem,heuristic=cornersHeuristic\nAdmissibility vs. Consistency: Remember, heuristics are just functions that take search states and return numbers that estimate the cost to a nearest goal. More effective heuristics will return values closer to the actual goal costs. To be admissible, the heuristic values must be lower bounds on the actual shortest path cost to the nearest goal (and non-negative). To be consistent, it must additionally hold that if an action has cost c, then taking that action can only cause a drop in heuristic of at most c.\nRemember that admissibility isn’t enough to guarantee correctness in graph search – you need the stronger condition of consistency. However, admissible heuristics are usually also consistent, especially if they are derived from problem relaxations. Therefore it is usually easiest to start out by brainstorming admissible heuristics. Once you have an admissible heuristic that works well, you can check whether it is indeed consistent, too. The only way to guarantee consistency is with a proof. However, inconsistency can often be detected by verifying that for each node you expand, its successor nodes are equal or higher in in f-value. Moreover, if UCS and A* ever return paths of different lengths, your heuristic is inconsistent. This stuff is tricky!\nNon-Trivial Heuristics: The trivial heuristics are the ones that return zero everywhere (UCS) and the ‘heuristic’ which computes the true completion cost. The former won’t save you any time, while the latter will usually timeout the autograder. You want a heuristic which reduces total compute time, though for this assignment the autograder will only check node counts (aside from enforcing a reasonable time limit).\nGrading: Your heuristic must be a non-trivial non-negative consistent heuristic to receive any points. Make sure that your heuristic returns 0 at every goal state and never returns a negative value. Depending on how few nodes your heuristic expands, you’ll be graded:\n\n\n\nNumber of nodes expanded\nGrade\n\n\n\n\nmore than 2000\n0/3\n\n\nat most 2000\n1/3\n\n\nat most 1600\n2/3\n\n\nat most 1200\n3/3\n\n\n\nRemember: If your heuristic is inconsistent, you will receive no credit, so be careful!\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q6"
  },
  {
    "objectID": "4511/hw/hw1.html#q7-4-pts-eating-all-the-dots",
    "href": "4511/hw/hw1.html#q7-4-pts-eating-all-the-dots",
    "title": "Homework One",
    "section": "10 Q7 (4 pts): Eating All The Dots",
    "text": "10 Q7 (4 pts): Eating All The Dots\nNow we’ll solve a hard search problem: eating all the Pacman food in as few steps as possible. For this, we’ll need a new search problem definition which formalizes the food-clearing problem: FoodSearchProblem in searchAgents.py (implemented for you). A solution is defined to be a path that collects all of the food in the Pacman world. For the present project, solutions do not take into account any ghosts or power pellets; solutions only depend on the placement of walls, regular food and Pacman. (Of course ghosts can ruin the execution of a solution! We’ll get to that in the next project.) If you have written your general search methods correctly, A* with a null heuristic (equivalent to uniform-cost search) should quickly find an optimal solution to testSearch with no code change on your part (total cost of 7).\npython pacman.py -l testSearch -p AStarFoodSearchAgent\nNote: AStarFoodSearchAgent is a shortcut for\n-p SearchAgent -a fn=astar,prob=FoodSearchProblem,heuristic=foodHeuristic\nNote: Make sure to complete Question 4 before working on Question 7, because Question 7 builds upon your answer for Question 4.\nFill in foodHeuristic in searchAgents.py with a consistent heuristic for the FoodSearchProblem. Try your agent on the trickySearch board:\npython pacman.py -l trickySearch -p AStarFoodSearchAgent\nOur UCS agent finds the optimal solution after expanding over 16,000 nodes.\nAny non-trivial non-negative consistent heuristic will receive 1 point. Make sure that your heuristic returns 0 at every goal state and never returns a negative value. Depending on how few nodes your heuristic expands, you’ll get additional points:\n\n\n\nNumber of nodes expanded\nGrade\n\n\n\n\nmore than 15000\n1/4\n\n\nat most 15000\n2/4\n\n\nat most 12000\n3/4\n\n\nat most 9000\n4/4 (full credit; medium)\n\n\nat most 7000\n5/4 (optional extra credit; hard)\n\n\n\nRemember: If your heuristic is inconsistent, you will receive no credit, so be careful! Can you solve mediumSearch in a short time? If so, we’re either very, very impressed, or your heuristic is inconsistent.\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q7"
  },
  {
    "objectID": "4511/hw/hw1.html#q8-3-pts-suboptimal-search",
    "href": "4511/hw/hw1.html#q8-3-pts-suboptimal-search",
    "title": "Homework One",
    "section": "11 Q8 (3 pts): Suboptimal Search",
    "text": "11 Q8 (3 pts): Suboptimal Search\nSometimes, even with A* and a good heuristic, finding the optimal path through all the dots is hard. In these cases, we’d still like to find a reasonably good path, quickly. In this section, you’ll write an agent that always greedily eats the closest dot. ClosestDotSearchAgent is implemented for you in searchAgents.py, but it’s missing a key function that finds a path to the closest dot.\nImplement the function findPathToClosestDot in searchAgents.py. Our agent solves this maze (suboptimally!) in under a second with a path cost of 350:\npython pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5\nHint: The quickest way to complete findPathToClosestDot is to fill in the AnyFoodSearchProblem, which is missing its goal test. Then, solve that problem with an appropriate search function. The solution should be very short!\nYour ClosestDotSearchAgent won’t always find the shortest possible path through the maze. Make sure you understand why and try to come up with a small example where repeatedly going to the closest dot does not result in finding the shortest path for eating all the dots.\nGrading: Please run the below command to see if your implementation passes all the autograder test cases.\npython autograder.py -q q8"
  }
]